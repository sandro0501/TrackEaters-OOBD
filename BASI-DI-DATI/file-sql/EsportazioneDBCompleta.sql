--FUNZIONI E PROCEDURE DEL DB
/*============================================================================================*/
/*============================================================================================*/
-- 1. Funzione IS_NUMBER il cui scopo è quello di verificare che una stringa inserita contenga solo caratteri numerici
CREATE FUNCTION IS_NUMBER (stringa IN VARCHAR2) RETURN INT
IS
valorenumerico NUMBER;
BEGIN
	-- Converte da valore numerico a stringa e ritorna 1
	valorenumerico := TO_NUMBER(stringa);
	RETURN 1;
	
	-- Se fallisce la conversione, errore e ritorna 0
	EXCEPTION WHEN VALUE_ERROR THEN
	RETURN 0;
END;
/
/*============================================================================================*/
/*============================================================================================*/
-- 2. Procedure Numero di telefono legale (viene riutilizzata più volte nei trigger) 
CREATE PROCEDURE NUMERO_DI_TELEFONO_LEGALE (numerotelefonico IN VARCHAR2) 
IS 
stringa VARCHAR2(15);
BEGIN

	-- Rimuove inizialmente tutti gli spazi, se presenti, dalla stringa del numero telefonico
	-- per effettuare il successivo controllo
    stringa := REPLACE(numerotelefonico,' ','');
	
	-- Se presente un prefisso nel numero telefonico con il carattere +, rimuove quest'ultimo
	-- per effettuare il successivo controllo 
	IF stringa LIKE '+%' THEN
		stringa := TRIM('+' FROM stringa);
	END IF;
	
	-- Controlla che i restanti caratteri associati al numero telefonico siano numeri. 
	-- Se il controllo fallisce, è presente un carattere diverso da un numero 
	-- quindi il numero di telefono non è valido.
	IF (is_number(stringa)=0) THEN
		RAISE_APPLICATION_ERROR(-20010,'Numero di telefono non valido.');
	END IF;
END;
/
/*============================================================================================*/
/*============================================================================================*/
-- 3. Procedure Password legale (viene riutilizzata più volte nei trigger)
CREATE PROCEDURE PASSWORD_LEGALE (password IN VARCHAR2) 
IS 
password_okay INTEGER; 
BEGIN
	-- Controlla se la password contiene almeno una lettera ed un numero 
	IF REGEXP_LIKE(password,'^.*[A-Z].*$') AND REGEXP_LIKE(password,'^.*[0-9].*$') THEN
		password_okay := 1;
	ELSE
		password_okay := 0; -- La password non contiene almeno una lettera ed un numero 
	END IF;
	
	-- Se la password inserita è lunga meno di 8 caratteri o 
	-- non contiene almeno una lettera ed un numero allora non è valida
	IF (LENGTH(password) < 8) OR (password_okay = 0) THEN
		RAISE_APPLICATION_ERROR(-20011,'Password non valida. 
		Deve contenere almeno 8 caratteri, una lettera ed un numero!');
	END IF;
END;
/
/*============================================================================================*/
/*============================================================================================*/
-- DEFINIZIONE DELLE TABELLE DB 
/*============================================================================================*/
/*============================================================================================*/
-- Creazione della tabella PROPRIETARIO
CREATE TABLE PROPRIETARIO
(
	CodProprietario	INTEGER	GENERATED BY DEFAULT AS IDENTITY,
	Username		VARCHAR2(64)  NOT NULL,	
	Password 		VARCHAR2(64)  NOT NULL,
	Nome			VARCHAR2(64)  NOT NULL,
	Cognome			VARCHAR2(64)  NOT NULL,
	Email			VARCHAR2(320)   
);
/
-- Definizione dei vincoli per la tabella PROPRIETARIO
ALTER TABLE PROPRIETARIO ADD
(
	-- Vincolo di chiave primaria
	CONSTRAINT PK_PROPRIETARIO PRIMARY KEY (CodProprietario),
	
	-- Vincolo Email legale
	CONSTRAINT EMAIL_LEGALE_PROPRIETARIO CHECK (Email LIKE '_%@_%.__%' OR Email IS NULL),
	
	-- Vincolo Unico username proprietario
	CONSTRAINT UNICO_USERNAME_PROPRIETARIO UNIQUE (Username)
);
/
-- Trigger per il vincolo Password legale 
CREATE OR REPLACE TRIGGER PASSWORD_PROPRIETARIO_LEGALE
BEFORE INSERT OR UPDATE ON PROPRIETARIO
FOR EACH ROW
BEGIN
	PASSWORD_LEGALE(:NEW.Password);
END;
/
/*============================================================================================*/
/*============================================================================================*/
-- Creazione della tabella RISTORANTE
CREATE TABLE RISTORANTE
(
	CodRistorante	INTEGER	GENERATED BY DEFAULT AS IDENTITY,
	Denominazione	VARCHAR2(64)  	NOT NULL,	
	Indirizzo 		VARCHAR2(64)  	NOT NULL,
	Telefono		VARCHAR2(20)  	NOT NULL,
	Citta			VARCHAR2(64)  			,
	Prov			VARCHAR2(2)   			,
	Cap				VARCHAR2(5)				,
	Email			VARCHAR2(320)			,  
	SitoWeb			VARCHAR2(100)			, 
	Proprietario	INTEGER		  	NOT NULL
);
/
-- Definizione dei vincoli per la tabella RISTORANTE
ALTER TABLE RISTORANTE ADD
(
	-- Vincolo di chiave primaria
	CONSTRAINT PK_RISTORANTE PRIMARY KEY (CodRistorante),
	
	-- Vincolo di chiave esterna
	/*Non sarà possibile eliminare un proprietario a cui sono associati uno o più ristoranti
	ON DELETE NO ACTION è implementato di default da ORACLE*/ 
	CONSTRAINT FK_PROPRIETARIO_RISTORANTE FOREIGN KEY (Proprietario) REFERENCES PROPRIETARIO(CodProprietario),
	
	-- Vincolo Email legale
	CONSTRAINT EMAIL_LEGALE_RISTORANTE CHECK (Email LIKE '_%@_%.__%' OR Email IS NULL),
	
	-- Vincolo Sito Web Legale
	CONSTRAINT SITO_WEB_LEGALE CHECK (SitoWeb LIKE 'www.__%._%' OR SitoWeb IS NULL)
);
/
-- Trigger per il vincolo Numero di telefono legale 
CREATE OR REPLACE TRIGGER NUMERO_DI_TELEFONO_RISTORANTE_LEGALE
BEFORE INSERT OR UPDATE ON RISTORANTE
FOR EACH ROW
BEGIN
	NUMERO_DI_TELEFONO_LEGALE(:NEW.Telefono);
END;
/
-- Trigger per il vincolo Cap legale
CREATE OR REPLACE TRIGGER CAP_LEGALE
BEFORE INSERT OR UPDATE ON RISTORANTE
FOR EACH ROW
BEGIN
	-- Controlla che i caratteri associati al CAP inserito siano 5 e tutti numeri. 
	-- Se il controllo fallisce, quindi è presente un carattere diverso da un numero oppure
	-- ci sono meno di 5 caratteri allora il CAP non è valido.
	IF (is_number(:NEW.Cap)=0) OR (LENGTH(:NEW.Cap)<5) THEN
		RAISE_APPLICATION_ERROR(-20012,'CAP inserito non valido.');
	END IF;
END;
/
/*============================================================================================*/
/*============================================================================================*/
-- Creazione della tabella MANAGERRISTORANTE
CREATE TABLE MANAGERRISTORANTE
(
	CodManager			INTEGER GENERATED BY DEFAULT AS IDENTITY,
	Username			VARCHAR2(64)  NOT NULL,	
	Password 			VARCHAR2(64)  NOT NULL,
	Nome				VARCHAR2(64)  NOT NULL,
	Cognome				VARCHAR2(64)  NOT NULL,
	Email				VARCHAR2(320)		  ,
	Telefono			VARCHAR2(20)  NOT NULL,
	RistoranteGestito	INTEGER 	  		  
);
/
-- Definizione dei vincoli per la tabella MANAGERRISTORANTE
ALTER TABLE MANAGERRISTORANTE ADD
(
	-- Vincolo di chiave primaria
	CONSTRAINT PK_MANAGER_RISTORANTE PRIMARY KEY (CodManager),
	
	-- Vincolo di chiave esterna
	-- Se si cancella un ristorante vengono eliminati anche i manager che lo gestiscono 
	CONSTRAINT FK_MANAGER_RISTORANTE FOREIGN KEY (RistoranteGestito) REFERENCES RISTORANTE(CodRistorante) ON DELETE CASCADE,
	
	-- Vincolo Email legale
	CONSTRAINT EMAIL_LEGALE_MANAGER_RISTORANTE CHECK (Email LIKE '_%@_%.__%' OR Email IS NULL),
	
	-- Vincolo Unico username manager
	CONSTRAINT UNICO_USERNAME_MANAGER_RISTORANTE UNIQUE (Username)
);
/
-- Trigger per il vincolo Password legale
CREATE OR REPLACE TRIGGER PASSWORD_MANAGER_RISTORANTE_LEGALE
BEFORE INSERT OR UPDATE ON MANAGERRISTORANTE
FOR EACH ROW
BEGIN
	PASSWORD_LEGALE(:NEW.Password);
END;
/
-- Trigger per il vincolo Numero di telefono legale 
CREATE OR REPLACE TRIGGER NUMERO_DI_TELEFONO_MANAGER_RISTORANTE_LEGALE
BEFORE INSERT OR UPDATE ON MANAGERRISTORANTE
FOR EACH ROW
BEGIN
	NUMERO_DI_TELEFONO_LEGALE(:NEW.Telefono);
END;
/
/*============================================================================================*/
/*============================================================================================*/
-- Creazione della tabella SALA
CREATE TABLE SALA
(
    CodSala				INTEGER GENERATED BY DEFAULT AS IDENTITY,
    Denominazione       VARCHAR2(64)    NOT NULL,
    CapienzaAvventori   INTEGER			NOT NULL,
    DimensioneMq        INTEGER		 			,
    TipoSala            VARCHAR(10)		NOT NULL,
    Ristorante        	INTEGER         NOT NULL   
);
/
-- Definizione dei vincoli per la tabella SALA
ALTER TABLE SALA ADD
(
    -- Vincolo di chiave primaria
    CONSTRAINT PK_SALA PRIMARY KEY (CodSala),
    
    -- Vincolo di chiave esterna
	-- Se si cancella un ristorante vengono eliminate anche le sale che vi appartengono
    CONSTRAINT FK_SALA_RISTORANTE FOREIGN KEY (Ristorante) REFERENCES RISTORANTE(CodRistorante) ON DELETE CASCADE,
	
	-- Vincolo CapienzaAvventori legale 
	CONSTRAINT CAPIENZAAVVENTORI_LEGALE CHECK (CapienzaAvventori>0),
	
	-- Vincolo DimensioneMq legale 
	CONSTRAINT DIMENSIONEMQ_LEGALE CHECK (DimensioneMq>0 OR DimensioneMq IS NULL),
	
	-- Vincolo TSala
	CONSTRAINT TSALA CHECK (TipoSala IN ('Interna','Esterna'))	
);
/
/*============================================================================================*/
/*============================================================================================*/
-- Creazione della tabella CAMERIERE
CREATE TABLE CAMERIERE
(
    NumCid              VARCHAR2(9)		NOT NULL,
    Nome                VARCHAR2(64)	NOT NULL,
    Cognome             VARCHAR2(64)	NOT NULL,
    DataN               DATE			NOT NULL,
    Sesso               VARCHAR2(20)	NOT NULL,
    CittaN              VARCHAR2(64)	NOT NULL,
    ProvN               VARCHAR2(2)		NOT NULL,
    CittaRes            VARCHAR2(64)	NOT NULL,
    ProvRes             VARCHAR2(2)		NOT NULL,
    Telefono            VARCHAR2(20)	NOT NULL,
    Email               VARCHAR2(320)			,
    Ristorante          INTEGER			NOT NULL  
);
/
-- Definizione dei vincoli per la tabella CAMERIERE
ALTER TABLE CAMERIERE ADD
(
	-- Vincolo di chiave primaria
	CONSTRAINT PK_CAMERIERE PRIMARY KEY (NumCid),
	
	-- Vincolo di chiave esterna
	-- Se si cancella un ristorante vengono eliminate anche i camerieri che vi lavorano
	CONSTRAINT FK_CAMERIERE_RISTORANTE FOREIGN KEY (Ristorante) REFERENCES RISTORANTE(CodRistorante) ON DELETE CASCADE,
	
	-- Vincolo Email legale
	CONSTRAINT EMAIL_LEGALE_CAMERIERE CHECK (Email LIKE '_%@_%.__%' OR Email IS NULL),
	
	-- Vincolo TSesso
	CONSTRAINT TSesso CHECK (Sesso IN ('Maschio','Femmina','Non specificato'))	
);
/
-- Trigger per il vincolo Numero di telefono legale 
CREATE OR REPLACE TRIGGER NUMERO_DI_TELEFONO_CAMERIERE_LEGALE
BEFORE INSERT OR UPDATE ON CAMERIERE
FOR EACH ROW
BEGIN
	NUMERO_DI_TELEFONO_LEGALE(:NEW.Telefono);
END;
/
-- Trigger per il vincolo Età cameriere legale
CREATE OR REPLACE TRIGGER ETA_CAMERIERE_LEGALE
BEFORE INSERT OR UPDATE ON CAMERIERE
FOR EACH ROW
DECLARE etacameriere INTEGER;
BEGIN
	-- Se l'età del cameriere è inferiore a 18 anni, 
	-- allora non sarà possibile inserire il cameriere 
	etacameriere := TRUNC((TO_NUMBER(SYSDATE - :NEW.DataN))/365.25); 
	
	IF etacameriere < 18 THEN 
		RAISE_APPLICATION_ERROR(-20014,'DataN per cameriere non valida. Un cameriere deve essere maggiorenne!');
	END IF; 
END;
/
/*============================================================================================*/
/*============================================================================================*/
-- Creazione della tabella TAVOLO
CREATE TABLE TAVOLO
(
    CodTavolo 		INTEGER GENERATED BY DEFAULT AS IDENTITY,
    MaxAvventori    INTEGER		NOT NULL,
    Sala            INTEGER		NOT NULL 
);
/
-- Definizione dei vincoli per la tabella TAVOLO
ALTER TABLE TAVOLO ADD
(
    -- Vincolo di chiave primaria
    CONSTRAINT PK_TAVOLO PRIMARY KEY (CodTavolo),
    
    -- Vincolo di chiave esterna
	-- Se si cancella una sala vengono eliminati anche i tavoli in essa contenuti
    CONSTRAINT FK_SALA_TAVOLO FOREIGN KEY (Sala) REFERENCES SALA(CodSala) ON DELETE CASCADE
);
/
-- Trigger per il vincolo MaxAvventori legale 
CREATE OR REPLACE TRIGGER MAXAVVENTORI_LEGALE
AFTER INSERT OR UPDATE ON TAVOLO
FOR EACH ROW 
DECLARE
capienza INTEGER;
BEGIN
	-- Calcolo di CapienzaAvventori 
	SELECT S.CapienzaAvventori INTO capienza
	FROM SALA S 
	WHERE S.CodSala = :NEW.Sala;

	-- Se MaxAvventori è <=0 allora non è valido 
	IF :NEW.MaxAvventori <=0 THEN
		RAISE_APPLICATION_ERROR(-20015,'Il valore per MaxAvventori deve essere maggiore di 0!');
	ELSE 
		-- Se MaxAvventori è > di CapienzaAvventori della sala in cui il tavolo è contenuto
		-- allora non è valido 
		IF :NEW.MaxAvventori > capienza THEN 
			RAISE_APPLICATION_ERROR(-20016,'Il valore di MaxAvventori per il tavolo deve essere 
			minore o uguale alla CapienzaAvventori della sala che contiene il tavolo in questione!');
		END IF;
	END IF; 
END;
/
-- Trigger per il vincolo Capienza legale 
CREATE OR REPLACE TRIGGER CAPIENZA_LEGALE
BEFORE INSERT ON TAVOLO
FOR EACH ROW
DECLARE
capienza INTEGER;
capienzacorrente INTEGER;
BEGIN
	-- Calcolo di CapienzaAvventori 
	SELECT S.CapienzaAvventori INTO capienza
	FROM SALA S 
	WHERE S.CodSala = :NEW.Sala;
	
	-- Calcolo della CapienzaAvventori corrente per la Sala 
	SELECT SUM(T.MaxAvventori) INTO capienzacorrente
	FROM TAVOLO T
	WHERE T.Sala =:NEW.Sala;
	
	-- Se la somma fra la Capienza corrente e il nuovo MaxAvventori supera 
	-- la Capienza massima della Sala allora blocca l'inserimento
	IF :NEW.MaxAvventori+capienzacorrente > capienza THEN
		RAISE_APPLICATION_ERROR(-20017,'Errore. Capienza massima della sala di riferimento superata!');
	END IF;
	
END;
/
/*============================================================================================*/
/*============================================================================================*/
-- Creazione della tabella ADIACENZATAVOLO
CREATE TABLE ADIACENZATAVOLO
(
   Tavolo 		   INTEGER,
   TavoloAdiacente INTEGER
);
/
-- Definizione dei vincoli per la tabella ADIACENZATAVOLO
ALTER TABLE ADIACENZATAVOLO ADD
(
    -- Vincoli di chiave esterna
    CONSTRAINT FK_TAVOLO FOREIGN KEY (Tavolo) REFERENCES TAVOLO(CodTavolo) ON DELETE CASCADE,
	CONSTRAINT FK_TAVOLOADIACENTE FOREIGN KEY (TavoloAdiacente) REFERENCES TAVOLO(CodTavolo) ON DELETE CASCADE,
	
	-- Vincolo Adiacenza legale
	CONSTRAINT ADIACENZA_LEGALE CHECK (Tavolo <> TavoloAdiacente)
);
/
/*============================================================================================*/
/*============================================================================================*/
-- Creazione della tabella TAVOLATA
CREATE TABLE TAVOLATA
(
    CodTavolata		INTEGER GENERATED BY DEFAULT AS IDENTITY,
    DataArrivo      DATE        					DEFAULT SYSDATE NOT NULL,
    OraArrivo       INTERVAL DAY(0) TO SECOND(0)	DEFAULT INTERVAL '20:00' HOUR TO MINUTE	 NOT NULL,
    OraUsicta       INTERVAL DAY(0) TO SECOND(0)	DEFAULT INTERVAL '22:00' HOUR TO MINUTE	 NOT NULL,
    Tavolo          INTEGER     					NOT NULL,
    Cameriere       VARCHAR2(9)    					NOT NULL  
);
/
-- Definizione dei vincoli per la tabella TAVOLATA
ALTER TABLE TAVOLATA ADD
(
	-- Vincolo di chiave primaria
    CONSTRAINT PK_TAVOLATA PRIMARY KEY (CodTavolata),
    
	-- Vincolo di chiave esterna
	-- Se si elimina un tavolo viene eliminata anche la tavolata ad esso associato 
	CONSTRAINT FK_TAVOLO_TAVOLATA FOREIGN KEY (Tavolo) REFERENCES TAVOLO(CodTavolo) ON DELETE CASCADE,
    
	-- Vincolo di chiave esterna
	CONSTRAINT FK_CAMERIERE_TAVOLATA FOREIGN KEY (Cameriere) REFERENCES CAMERIERE(NumCid),
   
	-- Vincolo Unica composizione tavolo a tavolata 
	CONSTRAINT UNICA_COMPOSIZIONE_TAVOLO_A_TAVOLATA UNIQUE(DataArrivo,Tavolo)
);
/
/*============================================================================================*/
/*============================================================================================*/
-- Creazione della tabella AVVENTORE
CREATE TABLE AVVENTORE
(
    NumCid              VARCHAR2(9)		NOT NULL,
    Nome                VARCHAR2(64)	NOT NULL,
    Cognome             VARCHAR2(64)	NOT NULL,
    DataN               DATE			NOT NULL,
    Sesso               VARCHAR2(15)	NOT NULL,
    CittaN              VARCHAR2(64)	NOT NULL,
    ProvN               VARCHAR2(2)		NOT NULL,
    CittaRes            VARCHAR2(64)	NOT NULL,
    ProvRes             VARCHAR2(2)		NOT NULL,
    Telefono            VARCHAR2(20)    NOT NULL,
    Email               VARCHAR2(320)			,
    Temperatura         DECIMAL(3,1)	NOT NULL,
    HaGreenpass         CHAR          	DEFAULT 'F' NOT NULL
);
/
-- Definizione dei vincoli per la tabella AVVENTORE
ALTER TABLE AVVENTORE ADD
(
	-- Vincolo di chiave primaria
    CONSTRAINT PK_AVVENTORE PRIMARY KEY (NumCid),
	
	-- Vincolo Email legale
	CONSTRAINT EMAIL_LEGALE_AVVENTORE CHECK (Email LIKE '_%@_%.__%' OR Email IS NULL),
	
	-- Vincolo TSesso
	CONSTRAINT TSesso_AVVENTORE CHECK (Sesso IN ('Maschio','Femmina','Non specificato')),	
	
	-- Vincolo per il dominio dell'attributo booleano HaGreenPass
	CONSTRAINT HAGREENPASS_VALUES CHECK (HaGreenPass IN('V','F')),
	
	-- Vincolo Temperatura avventore legale 
	CONSTRAINT TEMPERATURA_AVVENTORE_LEGALE CHECK (Temperatura BETWEEN 35.0 AND 37.5)	
);
/
-- Trigger per il vincolo Numero di telefono legale 
CREATE OR REPLACE TRIGGER NUMERO_DI_TELEFONO_AVVENTORE_LEGALE
BEFORE INSERT OR UPDATE ON AVVENTORE
FOR EACH ROW
BEGIN
	NUMERO_DI_TELEFONO_LEGALE(:NEW.Telefono);
END;
/
-- Trigger per il vincolo Temperatura avventore legale
CREATE OR REPLACE TRIGGER TEMPERATURA_AVVENTORE
BEFORE INSERT OR UPDATE ON AVVENTORE
FOR EACH ROW
BEGIN
	-- Se la temperatura dell'avventore supera i 37.5 gradi allora comunica che l'avventore 
	-- puo' essere un potenziale caso da registrare nella tabella CASO. 
	IF :NEW.Temperatura > 37.5 THEN 
		RAISE_APPLICATION_ERROR( -20020, 'Temperatura avventore illegale! 
		Potrebbe essere un potenziale CASO da registrare.');
	END IF;
END;
/
/*============================================================================================*/
/*============================================================================================*/
-- Creazione della tabella ACCOGLIENZA
CREATE TABLE ACCOGLIENZA
(
	Ristorante 	INTEGER 	NOT NULL, 
	Avventore	VARCHAR2(9) NOT NULL
);
/
-- Definizione dei vincoli per la tabella ACCOGLIENZA
ALTER TABLE ACCOGLIENZA ADD
(
    -- Vincoli di chiave esterna
    CONSTRAINT FK_RISTORANTE FOREIGN KEY (Ristorante) REFERENCES RISTORANTE(CodRistorante) ON DELETE CASCADE,
	CONSTRAINT FK_AVVENTORE FOREIGN KEY (Avventore) REFERENCES AVVENTORE(NumCid) ON DELETE CASCADE
);
/
/*============================================================================================*/
/*============================================================================================*/
-- Creazione della tabella PARTECIPAZIONETAVOLATA
CREATE TABLE PARTECIPAZIONETAVOLATA
(
	Avventore	VARCHAR2(9) NOT NULL,
	Tavolata 	INTEGER 	NOT NULL
);
/
-- Definizione dei vincoli per la tabella PARTECIPAZIONETAVOLATA
ALTER TABLE PARTECIPAZIONETAVOLATA ADD
(
    -- Vincoli di chiave esterna
	CONSTRAINT FK_PARTECIPAZIONE_AVVENTORE FOREIGN KEY (Avventore) REFERENCES AVVENTORE(NumCid) ON DELETE CASCADE,
	CONSTRAINT FK_PARTECIPAZIONE_TAVOLATA FOREIGN KEY (Tavolata) REFERENCES TAVOLATA(CodTavolata) ON DELETE CASCADE
);
/
-- Trigger per il vincolo Data nascita legale 
CREATE OR REPLACE TRIGGER DATA_NASCITA_LEGALE
BEFORE INSERT OR UPDATE ON PARTECIPAZIONETAVOLATA
FOR EACH ROW
DECLARE
datatavolata TAVOLATA.DataArrivo%TYPE; 
datanascita AVVENTORE.DataN%TYPE;
BEGIN
	-- Recupera la data della tavolata a cui partecipa l'avventore 
	SELECT T.DataArrivo INTO datatavolata
	FROM TAVOLATA T 
	WHERE T.CodTavolata = :NEW.Tavolata;
	
	-- Recupera la data di nascita dell'avventore che partecipa alla tavolata
	SELECT A.DataN INTO datanascita
	FROM AVVENTORE A
	WHERE A.NumCid = :NEW.Avventore;
	
	-- Se la data di nascita dell'avventore è successiva alla data della tavolata allora
	-- blocca l'inserimento dell'avventore 
	IF datanascita > datatavolata THEN 
		RAISE_APPLICATION_ERROR( -20018, 'L avventore non puo partecipare alla tavolata. 
		Controllare la sua data di nascita!');
	END IF;
END;
/
-- Trigger per il vincolo Has greenpass  
CREATE OR REPLACE TRIGGER HAS_GREENPASS
BEFORE INSERT OR UPDATE ON PARTECIPAZIONETAVOLATA
FOR EACH ROW
DECLARE 
tipologiasala SALA.TipoSala%TYPE;
hagreenpass AVVENTORE.HaGreenpass%TYPE; 
BEGIN
	
	-- Recupera la tipologia della sala in cui è ubicato il tavolo della tavolata a cui partecipa l'avventore 
	SELECT S.TipoSala INTO tipologiasala
	FROM TAVOLATA T JOIN TAVOLO TA ON T.Tavolo = TA.CodTavolo JOIN SALA S ON S.CodSala = TA.Sala
	WHERE T.CodTavolata = :NEW.Tavolata;
	
	-- Recupera informazione sul green pass per l'avventore che partecipa alla tavolata 
	SELECT A.HaGreenpass INTO hagreenpass 
	FROM AVVENTORE A 
	WHERE A.NumCid = :NEW.Avventore; 
	
	-- Se l'avventore è sprovvisto di green pass ed è stato associato ad una tavolata il cui tavolo 
	-- si trova in una sala interna allora non può partecipare alla tavolata. 
	IF hagreenpass='F' AND tipologiasala='Interna' THEN 
		RAISE_APPLICATION_ERROR( -20019, 'L avventore è sprovvisto di green pass. 
		Puo partecipare unicamente ad una tavolata composta da un tavolo ubicato in una sala esterna!');
	END IF;
END;
/
-- Trigger per il vincolo Somma avventori a tavolata legale 
CREATE OR REPLACE TRIGGER SOMMA_AVVENTORI_A_TAVOLATA_LEGALE
BEFORE INSERT ON PARTECIPAZIONETAVOLATA
FOR EACH ROW
DECLARE 
maxavventoritavolo TAVOLO.MaxAvventori%TYPE;
numavventoricorrente INTEGER; 
BEGIN
	-- Recupera il massimo numero dei posti del tavolo associato alla tavolata 
	SELECT TA.MaxAvventori INTO maxavventoritavolo
	FROM TAVOLATA T JOIN TAVOLO TA ON T.Tavolo = TA.CodTavolo
	WHERE T.CodTavolata = :NEW.Tavolata;
    
	-- Conta gli avventori correnti che partecipano alla tavolata 
	SELECT COUNT(P.Avventore) INTO numavventoricorrente
	FROM PARTECIPAZIONETAVOLATA P 
	WHERE P.Tavolata = :NEW.Tavolata;

	-- Se il numero di avventori correnti che partecipano alla tavolata 
	-- più il nuovo avventore che si sta per registrare 
	-- superano complessivamente il numero dei posti del tavolo 
	-- allora non è possibile registrare il nuovo avventore 
	IF numavventoricorrente+1 > maxavventoritavolo THEN 
		RAISE_APPLICATION_ERROR( -20021, 'Impossibile registrare avventore alla tavolata. 
		Il tavolo di riferimento ha tutti i posti occupati!');
	END IF;
END;
/
/*============================================================================================*/
/*============================================================================================*/
-- Creazione della tabella CASO
CREATE TABLE CASO
(
	CodCaso	INTEGER GENERATED BY DEFAULT AS IDENTITY,
    DataRegistrazione    DATE			NOT NULL,
    StatoCaso            VARCHAR2(20) 	DEFAULT 'NonRisolto' NOT NULL,
    Note                 VARCHAR2(100)	,
    AvventorePositivo    VARCHAR2(9)	,
    CamerierePositivo    VARCHAR2(9)	,
    RegistraProprietario INTEGER		,
    RegistraManager      INTEGER
);
/
-- Definizione dei vincoli per la tabella CASO
ALTER TABLE CASO ADD
(
    -- Vincolo di chiave primaria
    CONSTRAINT PK_CASO PRIMARY KEY (CodCaso),
    
    -- Vincolo di chiave esterna
    CONSTRAINT FK_AVVENTORE_POSITIVO FOREIGN KEY (AvventorePositivo) REFERENCES AVVENTORE(NumCid) ON DELETE SET NULL,
    
	-- Vincolo di chiave esterna
	CONSTRAINT FK_CAMERIERE_POSITIVO FOREIGN KEY (CamerierePositivo) REFERENCES CAMERIERE(NumCid) ON DELETE SET NULL,
   
	-- Vincolo di chiave esterna
	CONSTRAINT FK_REGISTRA_PROPRIETARIO FOREIGN KEY (RegistraProprietario) REFERENCES PROPRIETARIO(CodProprietario) ON DELETE SET NULL,
	
	-- Vincolo di chiave esterna
	CONSTRAINT FK_REGISTRA_MANAGER FOREIGN KEY (RegistraManager) REFERENCES MANAGERRISTORANTE(CodManager) ON DELETE SET NULL,
	
	-- Vincolo TCaso
	CONSTRAINT TCaso CHECK (StatoCaso IN ('Risolto','InRisoluzione','NonRisolto'))
);
/
-- Trigger per il vincolo Data registrazione caso 
CREATE OR REPLACE TRIGGER DATA_REGISTRAZIONE_CASO
BEFORE INSERT OR UPDATE ON CASO
FOR EACH ROW
DECLARE 
datanascita_avventore AVVENTORE.DataN%TYPE;
datanascita_cameriere CAMERIERE.DataN%TYPE;
BEGIN
	IF :NEW.AvventorePositivo IS NOT NULL  THEN 
		-- Recupera la data di nascita dell'avventore positivo 
		SELECT A.DataN INTO datanascita_avventore
		FROM AVVENTORE A 
		WHERE A.NumCid = :NEW.AvventorePositivo;
		
		-- Se la data di registrazione del caso precede la data di nascita
		-- allora non e' possibile registrare il caso 
		IF :NEW.DataRegistrazione < datanascita_avventore THEN 
				RAISE_APPLICATION_ERROR( -20022, 'Impossibile registrare caso: data registrazione non valida.');
		END IF; 	
	END IF; 

	IF :NEW.CamerierePositivo IS NOT NULL THEN 
		-- Recupera la data di nascita del cameriere positivo 
		SELECT C.DataN INTO datanascita_cameriere
		FROM CAMERIERE C 
		WHERE C.NumCid = :NEW.CamerierePositivo;
		
		-- Se la data di registrazione del caso precede la data di nascita
		-- allora non e' possibile registrare il caso 
		IF :NEW.DataRegistrazione < datanascita_cameriere THEN 
				RAISE_APPLICATION_ERROR( -20022, 'Impossibile registrare caso: data registrazione non valida.');
		END IF; 
	END IF; 	
END;
/
/*============================================================================================*/
/*============================================================================================*/
-- Creazione della VISTA RIEPILOGO_RISTORANTI_PROPRIETARIO 
-- la vista, dato un codice di un proprietario, crea un riepilogo generale che include dettagli su tutti i ristoranti da esso amministrati
-- supponiamo che sia CodProprietario = 1
CREATE VIEW RIEPILOGO_RISTORANTI_PROPRIETARIO (CodRistorante, Ristorante, Sala, CapienzaSala, TipoSala, TavoloInSala, MaxAvventoriTavolo) AS
SELECT R.CodRistorante, R.Denominazione, S.CodSala, S.CapienzaAvventori, S.TipoSala, T.CodTavolo, T.MaxAvventori
FROM PROPRIETARIO P JOIN RISTORANTE R ON P.CodProprietario = R.Proprietario JOIN SALA S ON R.CodRistorante = S.Ristorante JOIN TAVOLO T ON T.Sala = S.CodSala 
WHERE P.CodProprietario = 1
ORDER BY R.CodRistorante ASC, S.CodSala ASC, T.CodTavolo ASC;
/*============================================================================================*/
/*============================================================================================*/
-- Creazione della VISTA RIEPILOGO_TAVOLATE_RISTORANTI_PROPRIETARIO
-- la vista, dato un codice di un proprietario, crea un riepilogo generale che include dettagli su tutte le tavolate create nei ristoranti da lui amministrati
-- supponiamo che sia CodProprietario = 1
CREATE VIEW RIEPILOGO_TAVOLATE_RISTORANTI_PROPRIETARIO (CodRistorante, Ristorante, DataArrivo, CodTavolata, Sala, TipoSala, Tavolo, MaxAvventoriTavolo, PartecipantiTavolata)  AS
SELECT R.CodRistorante, R.Denominazione, TA.DataArrivo, TA.CodTavolata, S.CodSala, S.TipoSala, TA.Tavolo, T.MaxAvventori, COUNT(PT.Avventore) 
FROM PROPRIETARIO P JOIN RISTORANTE R ON P.CodProprietario = R.Proprietario 
				    JOIN SALA S ON R.CodRistorante = S.Ristorante 
					JOIN TAVOLO T ON T.Sala = S.CodSala 
					JOIN TAVOLATA TA ON TA.Tavolo = T.CodTavolo 
                    JOIN PARTECIPAZIONETAVOLATA PT ON PT.Tavolata = TA.CodTavolata
WHERE P.CodProprietario = 1 
GROUP BY R.CodRistorante, R.Denominazione, TA.DataArrivo, TA.CodTavolata, S.CodSala, S.TipoSala, TA.Tavolo, T.MaxAvventori 
ORDER BY R.CodRistorante ASC, TA.DataArrivo ASC, TA.CodTavolata ASC; 
/*============================================================================================*/
/*============================================================================================*/
-- Creazione della VISTA RIEPILOGO_AVVENTORI_RISTORANTI
-- la vista, dato un codice di un proprietario, crea un riepilogo generale che include dettagli anagrafici 
-- su tutti  gli avventori accolti nei ristoranti da lui amministrati, inclusi la tavolata, il tavolo e la sala in cui l'avventore è stato 
-- supponiamo che sia CodProprietario = 1
CREATE VIEW RIEPILOGO_AVVENTORI_RISTORANTI (CodRistorante, Ristorante, DataArrivo, NumCid, Nome, Cognome, DataN, Sesso, Telefono, Tavolata, Tavolo, Sala) AS
SELECT R.CodRistorante, R.Denominazione, T.DataArrivo, AVV.NumCid, AVV.Nome, AVV.Cognome, AVV.DataN, AVV.Sesso, AVV.Telefono, PT.Tavolata, T.Tavolo, TA.Sala
FROM  RISTORANTE R JOIN ACCOGLIENZA A ON R.CodRistorante = A.Ristorante
                   JOIN AVVENTORE AVV ON A.Avventore = AVV.NumCid 
                   JOIN PARTECIPAZIONETAVOLATA PT ON PT.Avventore = AVV.NumCid 
                   JOIN TAVOLATA T ON T.CodTavolata = PT.Tavolata
				   JOIN TAVOLO TA ON TA.CodTavolo = T.Tavolo 
WHERE R.Proprietario = 1 
ORDER BY R.CodRistorante ASC, T.DataArrivo ASC, PT.Tavolata ASC;
/*============================================================================================*/
/*============================================================================================*/ 
-- POPOLAMENTO TABELLE DEL DB 
/*============================================================================================*/
/*============================================================================================*/
-- Insert per la tabella PROPRIETARIO: aggiunge il proprietario dei ristoranti.
INSERT INTO PROPRIETARIO (CodProprietario, Username, Password, Nome, Cognome, Email)
VALUES (1,'sandro05','password00','Santolo','Barretta','santolobarretta05@gmail.com');
COMMIT;
/*============================================================================================*/
/*============================================================================================*/
-- Insert per la tabella RISTORANTE: aggiunge i ristoranti amministrati da un proprietario.
INSERT INTO RISTORANTE (CodRistorante, Denominazione, Indirizzo, Telefono, Citta, Prov, Cap, Email, SitoWeb, Proprietario)
VALUES (1,'Bella Napoli','Via Francesco Caracciolo, 1','0813509900','Napoli','NA','80122','bellanapoli@gmail.com','www.ristorantebellanapoli.it',1);

INSERT INTO RISTORANTE (CodRistorante, Denominazione, Indirizzo, Telefono, Citta, Prov, Cap, Email, SitoWeb, Proprietario)
VALUES (2,'Taverna Napoletana','Via Toledo, 30','0813339900','Napoli','NA','80134','bellanapoli@gmail.com','www.ristorantebellanapoli.it',1);

INSERT INTO RISTORANTE (CodRistorante, Denominazione, Indirizzo, Telefono, Citta, Prov, Cap, Proprietario)
VALUES (3,'Trattoria Milanese','Via Alessandro Manzoni, 5','+390289091122','Milano','MI','20121',1);
COMMIT;
/*============================================================================================*/
/*============================================================================================*/
-- Insert per la tabella MANAGERRISTORANTE: aggiunge i manager che gestiscono un ristorante, se previsti.
INSERT INTO MANAGERRISTORANTE (CodManager, Username, Password, Nome, Cognome, Email, Telefono, RistoranteGestito)
VALUES (1,'angelo02','qwerty0123','Angelo','Di Maio','angelodimaio@gmail.com','+393337060999',2);

INSERT INTO MANAGERRISTORANTE (CodManager, Username, Password, Nome, Cognome, Telefono, RistoranteGestito)
VALUES (2,'mariorossi33','mr123456','Mario','Rossi','+393517799111',3);
COMMIT;
/*============================================================================================*/
/*============================================================================================*/
-- Insert per la tabella SALA: aggiunge le sale ai relativi ristoranti cui appartengono.
INSERT INTO SALA (CodSala, Denominazione, CapienzaAvventori, DimensioneMq, TipoSala, Ristorante)
VALUES (1,'Sala Pulcinella',50,100,'Interna',1);

INSERT INTO SALA (CodSala, Denominazione, CapienzaAvventori, DimensioneMq, TipoSala, Ristorante)
VALUES (2,'Sala Vesuvio',20,60,'Interna',1);

INSERT INTO SALA (CodSala, Denominazione, CapienzaAvventori, DimensioneMq, TipoSala, Ristorante)
VALUES (3,'Sala Garden',10,30,'Esterna',1);

INSERT INTO SALA (CodSala, Denominazione, CapienzaAvventori, DimensioneMq, TipoSala, Ristorante)
VALUES (4,'Sala Maradona',50,100,'Interna',2);

INSERT INTO SALA (CodSala, Denominazione, CapienzaAvventori, DimensioneMq, TipoSala, Ristorante)
VALUES (5,'Sala Partenope',18,25,'Interna',2);

INSERT INTO SALA (CodSala, Denominazione, CapienzaAvventori, DimensioneMq, TipoSala, Ristorante)
VALUES (6,'Sala Duomo',30,80,'Interna',3);

INSERT INTO SALA (CodSala, Denominazione, CapienzaAvventori, DimensioneMq, TipoSala, Ristorante)
VALUES (7,'Sala Meneghino',30,80,'Interna',3);

INSERT INTO SALA (CodSala, Denominazione, CapienzaAvventori, DimensioneMq, TipoSala, Ristorante)
VALUES (8,'Sala Biscione',20,60,'Interna',3);

INSERT INTO SALA (CodSala, Denominazione, CapienzaAvventori, DimensioneMq, TipoSala, Ristorante)
VALUES (9,'Sala Exclusive',10,20,'Esterna',3);

INSERT INTO SALA (CodSala, Denominazione, CapienzaAvventori, DimensioneMq, TipoSala, Ristorante)
VALUES (10,'Sala Vip',10,NULL,'Esterna',3);
COMMIT;
/*============================================================================================*/
/*============================================================================================*/
-- Insert per la tabella CAMERIERE: aggiunge i camerieri ai rispettivi ristoranti per cui lavorano.
INSERT INTO CAMERIERE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Ristorante)
VALUES ('CA78432DB','Ciro','Esposito',TO_DATE('08/01/2000','dd/mm/yyyy'),'Maschio','Napoli','NA','Qualiano','NA','3517486042','ciroespo@gmail.com',1);

INSERT INTO CAMERIERE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Ristorante)
VALUES ('CA66421DA','Andrea','Russo',TO_DATE('10/10/1990','dd/mm/yyyy'),'Maschio','Villaricca','NA','Quarto','NA','3591676343','andrearusso@outlook.it',1);

INSERT INTO CAMERIERE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Ristorante)
VALUES ('AU0199811','Maria','De Rosa',TO_DATE('22/03/1989','dd/mm/yyyy'),'Femmina','Pozzuoli','NA','Napoli','NA','3722282194','mariaderosa@gmail.com',1);

INSERT INTO CAMERIERE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Ristorante)
VALUES ('CA64321CE','Rosaria','Romano',TO_DATE('30/08/1993','dd/mm/yyyy'),'Femmina','Napoli','NA','Napoli','NA','3218505681','romano01@gmail.com',1);

INSERT INTO CAMERIERE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Ristorante)
VALUES ('AU3425442','Pasquale','Riccio',TO_DATE('12/04/1988','dd/mm/yyyy'),'Maschio','Caserta','CE','Casoria','NA','3273256337','ricciopas22@outlook.it',1);

INSERT INTO CAMERIERE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Ristorante)
VALUES ('CA53216BE','Gabriele','Marino',TO_DATE('21/02/1993','dd/mm/yyyy'),'Maschio','Napoli','NA','Pozzuoli','NA','3553493696','marino0@gmail.com',2);

INSERT INTO CAMERIERE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Ristorante)
VALUES ('CA73121FE','Salvatore','Neri',TO_DATE('12/03/1996','dd/mm/yyyy'),'Maschio','Napoli','NA','Bacoli','NA','3215642156','sasineri11@gmail.com',2);

INSERT INTO CAMERIERE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Ristorante)
VALUES ('AU0567231','Luisa','Esposito',TO_DATE('08/01/2000','dd/mm/yyyy'),'Femmina','Napoli','NA','Quarto','NA','3445768683','espolui0@outlook.com',2);

INSERT INTO CAMERIERE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Ristorante)
VALUES ('CA52131PV','Carmen','Granata',TO_DATE('28/05/1995','dd/mm/yyyy'),'Femmina','Marcianise','CE','Pozzuoli','NA','3830046533','carmen233@gmail.com',2);

INSERT INTO CAMERIERE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Ristorante)
VALUES ('CA87452TB','Laura','Galli',TO_DATE('17/11/1999','dd/mm/yyyy'),'Femmina','Milano','MI','Legnano','MI','3746409289','lauragalli56@gmail.com',3);

INSERT INTO CAMERIERE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Ristorante)
VALUES ('CA33145OD','Sara','Sala',TO_DATE('13/12/2000','dd/mm/yyyy'),'Femmina','Milano','MI','Sesto San Giovanni','MI','3227317200','sara123@gmail.com',3);

INSERT INTO CAMERIERE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Ristorante)
VALUES ('AU0236754','Fiorella','Bianchi',TO_DATE('25/10/1990','dd/mm/yyyy'),'Femmina','Milano','MI','Rho','MI','3229731501','bianchi0@outlook.com',3);

INSERT INTO CAMERIERE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Ristorante)
VALUES ('CA10946DE','Raffaele','Fontana',TO_DATE('04/09/1994','dd/mm/yyyy'),'Maschio','Milano','MI','Legnano','MI','3619439924','raffaele444@gmail.com',3);

INSERT INTO CAMERIERE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Ristorante)
VALUES ('CA33241OA','Achille','Rinaldi',TO_DATE('21/05/1987','dd/mm/yyyy'),'Maschio','Milano','MI','Milano','MI','3283664283','achillerinaldi2@gmail.com',3);

INSERT INTO CAMERIERE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Ristorante)
VALUES ('CA13264UI','Morena','Costa',TO_DATE('19/03/1999','dd/mm/yyyy'),'Femmina','Milano','MI','Assago','MI','3194130484','morena43@outlook.com',3);
COMMIT;
/*============================================================================================*/
/*============================================================================================*/
-- Insert per la tabella TAVOLO: aggiunge i tavoli alle relative sale dei ristoranti.
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (1, 10, 1);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (2, 5, 1);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (3, 5, 1);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (4, 2, 1);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (5, 2, 1);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (6, 2, 1);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (7, 2, 1);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (8, 2, 1);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (9, 20, 1);

INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (10, 5, 2);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (11, 5, 2);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (12, 2, 2);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (13, 2, 2);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (14, 2, 2);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (15, 2, 2);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (16, 2, 2);

INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (17, 2, 3);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (18, 2, 3);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (19, 2, 3);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (20, 2, 3);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (21, 2, 3);

INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (22, 10, 4);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (23, 5, 4);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (24, 5, 4);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (25, 2, 4);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (26, 2, 4);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (27, 2, 4);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (28, 2, 4);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (29, 2, 4);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (30, 20, 4);

INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (31, 2, 5);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (32, 2, 5);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (33, 4, 5);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (34, 2, 5);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (35, 2, 5);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (36, 2, 5);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (37, 4, 5);

INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (38, 10, 6);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (39, 5, 6);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (40, 5, 6);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (41, 10, 6);

INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (42, 10, 7);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (43, 5, 7);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (44, 5, 7);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (45, 10, 7);

INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (46, 5, 8);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (47, 5, 8);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (48, 2, 8);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (49, 2, 8);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (50, 2, 8);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (51, 2, 8);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (52, 2, 8);

INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (53, 2, 9);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (54, 2, 9);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (55, 2, 9);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (56, 2, 9);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (57, 2, 9);

INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (58, 2, 10);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (59, 2, 10);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (60, 2, 10);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (61, 2, 10);
INSERT INTO TAVOLO (CodTavolo, MaxAvventori, Sala) VALUES (62, 2, 10);
COMMIT;
/*============================================================================================*/
/*============================================================================================*/
-- Insert per la tabella ADIACENZATAVOLO: aggiunge la lista di tavoli adiacenti per ogni tavolo, se esiste adiacenza
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (1, 2);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (1, 4);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (2, 1);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (2, 5);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (2, 3);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (3, 2);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (3, 6);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (4, 1);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (4, 5);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (4, 7);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (5, 4);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (5, 2);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (5, 6);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (5, 8);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (6, 3);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (6, 5);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (6, 9);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (7, 4);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (7, 8);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (8, 7);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (8, 5);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (8, 9);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (9, 8);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (9, 6);

INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (10, 13);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (10, 11);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (11, 14);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (11, 12);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (12, 11);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (12, 15);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (13, 10);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (13, 14);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (14, 11);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (14, 15);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (15, 12);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (15, 16);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (16, 15);

INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (17, 18);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (17, 19);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (18, 17);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (18, 20);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (19, 17);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (19, 20);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (19, 21);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (20, 18);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (20, 19);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (21, 19);

INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (22, 23);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (22, 25);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (23, 22);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (23, 26);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (23, 24);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (24, 23);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (24, 27);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (25, 22);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (25, 26);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (25, 30);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (26, 25);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (26, 23);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (26, 27);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (27, 26);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (27, 24);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (27, 28);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (28, 27);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (28, 29);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (30, 25);

INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (31, 32);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (31, 34);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (32, 31);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (32, 35);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (32, 33);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (33, 32);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (33, 36);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (34, 31);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (34, 35);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (35, 34);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (35, 32);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (35, 36);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (36, 37);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (36, 35);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (36, 33);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (37, 36);

INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (38, 39);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (39, 38);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (39, 40);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (39, 41);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (40, 39);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (41, 39);

INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (42, 43);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (43, 42);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (43, 44);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (43, 45);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (44, 43);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (45, 43);

INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (46, 47);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (46, 48);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (47, 46);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (47, 49);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (48, 46);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (48, 49);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (49, 48);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (49, 47);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (49, 50);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (50, 49);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (50, 51);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (51, 50);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (51, 52);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (52, 51);

INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (53, 54);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (53, 55);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (54, 53);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (54, 56);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (55, 53);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (55, 56);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (55, 57);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (56, 54);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (56, 55);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (57, 55);

INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (58, 59);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (58, 60);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (59, 58);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (59, 61);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (60, 58);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (60, 61);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (60, 62);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (61, 60);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (61, 59);
INSERT INTO ADIACENZATAVOLO (Tavolo, TavoloAdiacente) VALUES (62, 60);
COMMIT;
/*============================================================================================*/
/*============================================================================================*/
-- Insert per la tabella TAVOLATA: inserisce le tavolate create per i rispettivi ristoranti 
INSERT INTO TAVOLATA (CodTavolata, DataArrivo, Tavolo, Cameriere) VALUES (1, TO_DATE('17/11/2021','dd/mm/yyyy'),4,'CA78432DB');

INSERT INTO TAVOLATA (CodTavolata, DataArrivo, Tavolo, Cameriere) VALUES (2, TO_DATE('17/11/2021','dd/mm/yyyy'),5,'CA66421DA');

INSERT INTO TAVOLATA (CodTavolata, DataArrivo, Tavolo, Cameriere) VALUES (3, TO_DATE('18/11/2021','dd/mm/yyyy'),12,'AU0199811');

INSERT INTO TAVOLATA (CodTavolata, DataArrivo, Tavolo, Cameriere) VALUES (4, TO_DATE('18/11/2021','dd/mm/yyyy'),13,'CA64321CE');

INSERT INTO TAVOLATA (CodTavolata, DataArrivo, Tavolo, Cameriere) VALUES (5, TO_DATE('19/11/2021','dd/mm/yyyy'),18,'AU3425442');

INSERT INTO TAVOLATA (CodTavolata, DataArrivo, Tavolo, Cameriere) VALUES (6, TO_DATE('20/11/2021','dd/mm/yyyy'),8,'CA78432DB');

INSERT INTO TAVOLATA (CodTavolata, DataArrivo, Tavolo, Cameriere) VALUES (7, TO_DATE('20/11/2021','dd/mm/yyyy'),25,'CA53216BE');

INSERT INTO TAVOLATA (CodTavolata, DataArrivo, Tavolo, Cameriere) VALUES (8, TO_DATE('22/11/2021','dd/mm/yyyy'),26,'CA73121FE');

INSERT INTO TAVOLATA (CodTavolata, DataArrivo, Tavolo, Cameriere) VALUES (9, TO_DATE('22/11/2021','dd/mm/yyyy'),27,'AU0567231');

INSERT INTO TAVOLATA (CodTavolata, DataArrivo, Tavolo, Cameriere) VALUES (10, TO_DATE('25/11/2021','dd/mm/yyyy'),37,'CA52131PV');

INSERT INTO TAVOLATA (CodTavolata, DataArrivo, Tavolo, Cameriere) VALUES (11, TO_DATE('19/12/2021','dd/mm/yyyy'),26,'CA53216BE');

INSERT INTO TAVOLATA (CodTavolata, DataArrivo, Tavolo, Cameriere) VALUES (12, TO_DATE('20/12/2021','dd/mm/yyyy'),39,'CA87452TB');

INSERT INTO TAVOLATA (CodTavolata, DataArrivo, Tavolo, Cameriere) VALUES (13, TO_DATE('20/12/2021','dd/mm/yyyy'),49,'CA33145OD');

INSERT INTO TAVOLATA (CodTavolata, DataArrivo, Tavolo, Cameriere) VALUES (14, TO_DATE('24/12/2021','dd/mm/yyyy'),50,'AU0236754');

INSERT INTO TAVOLATA (CodTavolata, DataArrivo, Tavolo, Cameriere) VALUES (15, TO_DATE('25/12/2021','dd/mm/yyyy'),53,'CA10946DE');

INSERT INTO TAVOLATA (CodTavolata, DataArrivo, Tavolo, Cameriere) VALUES (16,TO_DATE('25/01/2022','dd/mm/yyyy'),55,'CA33241OA');

INSERT INTO TAVOLATA (CodTavolata, DataArrivo, Tavolo, Cameriere) VALUES (17,TO_DATE('25/01/2022','dd/mm/yyyy'),62,'CA13264UI');

INSERT INTO TAVOLATA (CodTavolata, DataArrivo, Tavolo, Cameriere) VALUES (18,TO_DATE('25/01/2022','dd/mm/yyyy'),50,'CA13264UI');
COMMIT;
/*===========================================================================================*/
/*===========================================================================================*/
-- Insert per la tabella AVVENTORE: inserisce una lista di avventori generici con le loro generalità 
INSERT INTO AVVENTORE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Temperatura, HaGreenpass)
VALUES('IC3159530','Baldassarre','Pinto',TO_DATE('04/06/1953','dd/mm/yyyy'),'Maschio','Napoli','NA','Napoli','NA','+393493302038','baldassareepinto@gmail.com',35.8,'V');

INSERT INTO AVVENTORE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Temperatura, HaGreenpass)
VALUES('PW824173','Filiberto','Milano',TO_DATE('19/11/1940','dd/mm/yyyy'),'Maschio','Napoli','NA','Napoli','NA','+393598741558','filibertomilano@outlook.com',36.8,'V');

INSERT INTO AVVENTORE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Temperatura, HaGreenpass)
VALUES('WF1996739','Felicita','Piazza',TO_DATE('16/06/1973','dd/mm/yyyy'),'Femmina','Vindoli','RN','Vindoli','RN','+393658942018','felicitaPiazza3@libero.it',36.9,'V');

INSERT INTO AVVENTORE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Temperatura, HaGreenpass)
VALUES('SU2810531','Lea','Barese',TO_DATE('26/07/1985','dd/mm/yyyy'),'Femmina','Cino','SO','Caivano','NA','+393259847862','leaBarese26@gmail.com',36.5,'V');

INSERT INTO AVVENTORE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Temperatura, HaGreenpass)
VALUES('BD8518049','Nazzareno','Onio',TO_DATE('07/12/2001','dd/mm/yyyy'),'Maschio','Badia','VV','Marcianise','CE','+393517788436','nazaon2001@outlook.it',37.0,'V');

INSERT INTO AVVENTORE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Temperatura, HaGreenpass)
VALUES('KT5802431','Edoardo','Ricci',TO_DATE('29/01/2002','dd/mm/yyyy'),'Maschio','Perticani','PG','Benevento','BN','+393254159687','edoRich@libero.it',36.4,'V');

INSERT INTO AVVENTORE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Temperatura, HaGreenpass)
VALUES('WI0726870','Prospero','Padovesi',TO_DATE('24/04/1963','dd/mm/yyyy'),'Maschio','Dorno','PV','Caserta','CE','+393659852014','prPa2404@gmail.com',36.4,'V');

INSERT INTO AVVENTORE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Temperatura, HaGreenpass)
VALUES('CY1881570','Alice','Cocci',TO_DATE('24/05/1951','dd/mm/yyyy'),'Femmina','Calvignasco','MI','Roma','RM','+393654002598','AliceCC@outlook.com',36.2,'V');

INSERT INTO AVVENTORE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Temperatura, HaGreenpass)
VALUES('RT1739919','Quinzio','Pugliesi',TO_DATE('18/05/1989','dd/mm/yyyy'),'Maschio','Ascensione','RA','Recale','CE','+393398947852','QuinzioPugliesi0589@gmail.com',37.0,'F');

INSERT INTO AVVENTORE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Temperatura, HaGreenpass)
VALUES('YS3432289','Ida','Pagnotto',TO_DATE('01/03/1966','dd/mm/yyyy'),'Femmina','Martano','LE','Martano','LE','+393698521655','IdaPagno@gmail.com',36.8,'F');

INSERT INTO AVVENTORE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Temperatura, HaGreenpass)
VALUES('GU1160846','Geronima','Endrizzi',TO_DATE('09/11/2000','dd/mm/yyyy'),'Non specificato','Nago','TN','Vico Equense','NA','+393854759624','GeronimaEnd@gmail.com',35.9,'V');

INSERT INTO AVVENTORE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Temperatura, HaGreenpass)
VALUES('AD8695321','Carolina','Pugliese',TO_DATE('07/04/1953','dd/mm/yyyy'),'Femmina','Casavatore','NA','Casoria','NA','+393275273639','CarolinaPugliese@gmail.com',35.4,'V');

INSERT INTO AVVENTORE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Temperatura, HaGreenpass)
VALUES('BG2548759','Marcella','Pezzali',TO_DATE('28/12/1977','dd/mm/yyyy'),'Femmina','Arzano','NA','Arzano','NA','+393732068075','MarcellaPezzali@gmail.com',36.1,'V');

INSERT INTO AVVENTORE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Temperatura, HaGreenpass)
VALUES('GH5632104','Dolores','Zanzi',TO_DATE('18/01/1955','dd/mm/yyyy'),'Femmina','Volla','NA','Cetara','SA','+393380722982','DoloresDePanza@gmail.com',36.4,'V');

INSERT INTO AVVENTORE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Temperatura, HaGreenpass)
VALUES('FR5849625','Fabiola','Mengolo',TO_DATE('19/09/1956','dd/mm/yyyy'),'Femmina','Giffoni Sei Casali','SA','San Giorgio a Cremano','NA','+393416755818','FabiMengolo@gmail.com',36.5,'V');

INSERT INTO AVVENTORE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Temperatura, HaGreenpass)
VALUES('TR5625487','Daniele','Bernardi',TO_DATE('03/12/1959','dd/mm/yyyy'),'Maschio','Cercola','NA','Portici','NA','+393562319517','DaanBernardi@gmail.com',37.1,'V');

INSERT INTO AVVENTORE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Temperatura, HaGreenpass)
VALUES('BR2648058','Carolina','Lombardi',TO_DATE('07/11/1961','dd/mm/yyyy'),'Femmina','Melito di Napoli','NA','Melito di Napoli','NA','+393516530360','CaroLombardi@gmail.com',37.0,'V');

INSERT INTO AVVENTORE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Temperatura, HaGreenpass)
VALUES('LE2615481','Rossana','Filzi',TO_DATE('23/09/1965','dd/mm/yyyy'),'Femmina','Afragola','NA','Montecorvino Pugliano','SA','+393316825631','RossanaFilzi@gmail.com',36.8,'V');

INSERT INTO AVVENTORE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Temperatura, HaGreenpass)
VALUES('ML6215403','Pierluigi','Trapanese',TO_DATE('30/09/1965','dd/mm/yyyy'),'Maschio','Casandrino','NA','Fisciano','SA','+393303659368','LuigiTrapanese@gmail.com',36.8,'V');

INSERT INTO AVVENTORE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Temperatura, HaGreenpass)
VALUES('RS4697315','Silvia','Golgi',TO_DATE('22/04/1968','dd/mm/yyyy'),'Femmina','Casalnuovo di Napoli','NA','Calvanico','SA','+393869408344','SilviGolgi@gmail.com',36.6,'V');

INSERT INTO AVVENTORE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Temperatura, HaGreenpass)
VALUES('GC9674582','Nicola','Ricci',TO_DATE('21/08/1969','dd/mm/yyyy'),'Maschio','Bellizzi','SA','San Sebastiano al Vesuvio','NA','+393362582808','NicoRic@gmail.com',36.5,'V');

INSERT INTO AVVENTORE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Temperatura, HaGreenpass)
VALUES('AE6164595','Antonio','Bettoni',TO_DATE('20/08/1971','dd/mm/yyyy'),'Maschio','Mugnano di Napoli','NA','Mercato San Severino','SA','+393410197804','AntoBet@gmail.com',36.3,'V');

INSERT INTO AVVENTORE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Temperatura, HaGreenpass)
VALUES('PO3031697','Amleto','Virgilio',TO_DATE('05/01/1975','dd/mm/yyyy'),'Maschio','Marano di Napoli','NA','Maiori','SA','+393488969310','AmletoVirgilio@gmail.com',36.2,'V');

INSERT INTO AVVENTORE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Temperatura, HaGreenpass)
VALUES('MR9748683','Mauro','Priuli',TO_DATE('15/04/1988','dd/mm/yyyy'),'Maschio','Marano di Napoli','NA','Marano di Napoli','NA','+393394922230','MauroPriuli@gmail.com',36.2,'V');

INSERT INTO AVVENTORE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Temperatura, HaGreenpass)
VALUES('DR0301264','Rosaria','Argurio',TO_DATE('25/05/1976','dd/mm/yyyy'),'Femmina','Dugenta','BN','Durazzano','BN','+393250404211','RosiArgurio@gmail.com',36.5,'V');

INSERT INTO AVVENTORE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Temperatura, HaGreenpass)
VALUES('LZ9575684','Mauro','Zola',TO_DATE('17/10/1979','dd/mm/yyyy'),'Maschio','Bellona','CE','Arienzo','CE','+393411767562','MauroZola@gmail.com',36.5,'V');

INSERT INTO AVVENTORE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Temperatura, HaGreenpass)
VALUES('IC2558319','Donatello','Pellegrini',TO_DATE('19/03/1980','dd/mm/yyyy'),'Maschio','Vitulazio','CE','Vitulazio','CE','+393397508638','DonaPellegrini@gmail.com',37.0,'V');

INSERT INTO AVVENTORE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Temperatura, HaGreenpass)
VALUES('TE0864370','Giancarlo','Boitani',TO_DATE('05/04/1982','dd/mm/yyyy'),'Maschio','Cervino','CE','San Felice a Cancello','CE','+393416061365','GianBoitani@gmail.com',37.0,'V');

INSERT INTO AVVENTORE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Temperatura, HaGreenpass)
VALUES('ZO6283162','Melania','Poerio',TO_DATE('23/04/1984','dd/mm/yyyy'),'Femmina','Santa Maria a Vico','CE','Santa Maria la Fossa','CE','+393533370100','MelaniaPoerio@gmail.com',36.7,'V');

INSERT INTO AVVENTORE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Temperatura, HaGreenpass)
VALUES('IH2648039','Renata','Pizzetti',TO_DATE('11/11/1985','dd/mm/yyyy'),'Femmina','Piana di Monte Verna','CE','Piana di Monte Verna','CE','+393516025201','RenataPizz@gmail.com',36.7,'V');

INSERT INTO AVVENTORE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Temperatura, HaGreenpass)
VALUES('FU2645786','Giuseppina','Giannuzzi',TO_DATE('20/07/1990','dd/mm/yyyy'),'Femmina','Grazzanise','CE','Grazzanise','CE','+393520418674','GeppyGianni@gmail.com',36.3,'V');

INSERT INTO AVVENTORE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Temperatura, HaGreenpass)
VALUES('UR6437280','Angelica','Barbarigo',TO_DATE('02/07/1991','dd/mm/yyyy'),'Femmina','San Tammaro','CE','Santa Maria Capua Vetere','CE','+393510895615','LikaBarbagio@gmail.com',36.3,'V');

INSERT INTO AVVENTORE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Temperatura, HaGreenpass)
VALUES('OG6407351','Melissa','Tasso',TO_DATE('16/08/1992','dd/mm/yyyy'),'Femmina','Santa Maria Capua Vetere','CE','Caiazzo','CE','+393309496253','MeliTasso@gmail.com',36.4,'V');

INSERT INTO AVVENTORE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Temperatura, HaGreenpass)
VALUES('OG6427318','Gianluca','Murri',TO_DATE('19/05/1995','dd/mm/yyyy'),'Maschio','Marcianise','CE','Marcianise','CE','+393528831547','GianMurri@gmail.com',36.5,'F');

INSERT INTO AVVENTORE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Temperatura, HaGreenpass)
VALUES('LR9137648','Jolanda','Adinolfi',TO_DATE('06/05/1996','dd/mm/yyyy'),'Femmina','Portico di Caserta','CE','Macerata Campania','CE','+393519447992','JoleAdi@gmail.com',37.0,'F');

INSERT INTO AVVENTORE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Temperatura, HaGreenpass)
VALUES('HE5467974','Fernando','Cilibrasi',TO_DATE('19/07/1997','dd/mm/yyyy'),'Maschio','Pozzuoli','NA','Pozzuoli','NA','+393342696918','FernandoCilibrasi@gmail.com',36.5,'F');

INSERT INTO AVVENTORE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Temperatura, HaGreenpass)
VALUES('TR9746286','Roberto','Camanni',TO_DATE('24/11/1998','dd/mm/yyyy'),'Maschio','Quarto','NA','Quarto','NA','+393438255310','RobiCamanni@gmail.com',36.4,'F');

INSERT INTO AVVENTORE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Temperatura, HaGreenpass)
VALUES('IT3146975','Carmelo','Mastroianni',TO_DATE('12/02/1999','dd/mm/yyyy'),'Maschio','Cardito','NA','Curti','CE','+393309290526','CarmeloMastroianni@gmail.com',36.5,'F');

INSERT INTO AVVENTORE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Temperatura, HaGreenpass)
VALUES('HY9746580','Ezio','Ammaniti',TO_DATE('11/12/2001','dd/mm/yyyy'),'Maschio','Frattamaggiore','NA','Frattamaggiore','NA','+393353722101','EzioAmm@gmail.com',36.8,'F');

INSERT INTO AVVENTORE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Temperatura, HaGreenpass)
VALUES('LH9137684','Aria','Moschino',TO_DATE('02/05/2002','dd/mm/yyyy'),'Femmina','Capodrise','CE','Massa di Somma','NA','+393301539510','AriMoschino@gmail.com',36.7,'V');

INSERT INTO AVVENTORE (NumCid, Nome, Cognome, DataN, Sesso, CittaN, ProvN, CittaRes, ProvRes, Telefono, Email, Temperatura, HaGreenpass)
VALUES('GE9197735','Vittorio','Pulci',TO_DATE('10/12/2002','dd/mm/yyyy'),'Maschio','Grumo Nevano','NA','Casapulla','CE','+393273531946','VikPulci@gmail.com',36.5,'V');
COMMIT;
/*===========================================================================================*/
/*===========================================================================================*/
-- Insert per la tabella ACCOGLIENZA: collega ogni avventore al ristorante che lo accoglie 
INSERT INTO ACCOGLIENZA (Ristorante, Avventore) VALUES (1,'IC3159530');
INSERT INTO ACCOGLIENZA (Ristorante, Avventore) VALUES (1,'PW824173');
INSERT INTO ACCOGLIENZA (Ristorante, Avventore) VALUES (1,'WF1996739');
INSERT INTO ACCOGLIENZA (Ristorante, Avventore) VALUES (1,'SU2810531');
INSERT INTO ACCOGLIENZA (Ristorante, Avventore) VALUES (1,'BD8518049');
INSERT INTO ACCOGLIENZA (Ristorante, Avventore) VALUES (1,'KT5802431');
INSERT INTO ACCOGLIENZA (Ristorante, Avventore) VALUES (1,'WI0726870');
INSERT INTO ACCOGLIENZA (Ristorante, Avventore) VALUES (1,'CY1881570');
INSERT INTO ACCOGLIENZA (Ristorante, Avventore) VALUES (1,'RT1739919');
INSERT INTO ACCOGLIENZA (Ristorante, Avventore) VALUES (1,'YS3432289');
INSERT INTO ACCOGLIENZA (Ristorante, Avventore) VALUES (1,'GU1160846');
INSERT INTO ACCOGLIENZA (Ristorante, Avventore) VALUES (1,'AD8695321');

INSERT INTO ACCOGLIENZA (Ristorante, Avventore) VALUES (2,'BG2548759');
INSERT INTO ACCOGLIENZA (Ristorante, Avventore) VALUES (2,'GH5632104');
INSERT INTO ACCOGLIENZA (Ristorante, Avventore) VALUES (2,'FR5849625');
INSERT INTO ACCOGLIENZA (Ristorante, Avventore) VALUES (2,'TR5625487');
INSERT INTO ACCOGLIENZA (Ristorante, Avventore) VALUES (2,'BR2648058');
INSERT INTO ACCOGLIENZA (Ristorante, Avventore) VALUES (2,'LE2615481');
INSERT INTO ACCOGLIENZA (Ristorante, Avventore) VALUES (2,'ML6215403');
INSERT INTO ACCOGLIENZA (Ristorante, Avventore) VALUES (2,'RS4697315');
INSERT INTO ACCOGLIENZA (Ristorante, Avventore) VALUES (2,'GC9674582');
INSERT INTO ACCOGLIENZA (Ristorante, Avventore) VALUES (2,'AE6164595');
INSERT INTO ACCOGLIENZA (Ristorante, Avventore) VALUES (2,'PO3031697');
INSERT INTO ACCOGLIENZA (Ristorante, Avventore) VALUES (2,'MR9748683');

INSERT INTO ACCOGLIENZA (Ristorante, Avventore) VALUES (3,'DR0301264');
INSERT INTO ACCOGLIENZA (Ristorante, Avventore) VALUES (3,'LZ9575684');
INSERT INTO ACCOGLIENZA (Ristorante, Avventore) VALUES (3,'IC2558319');
INSERT INTO ACCOGLIENZA (Ristorante, Avventore) VALUES (3,'TE0864370');
INSERT INTO ACCOGLIENZA (Ristorante, Avventore) VALUES (3,'ZO6283162');
INSERT INTO ACCOGLIENZA (Ristorante, Avventore) VALUES (3,'IH2648039');
INSERT INTO ACCOGLIENZA (Ristorante, Avventore) VALUES (3,'FU2645786');
INSERT INTO ACCOGLIENZA (Ristorante, Avventore) VALUES (3,'UR6437280');
INSERT INTO ACCOGLIENZA (Ristorante, Avventore) VALUES (3,'OG6407351');
INSERT INTO ACCOGLIENZA (Ristorante, Avventore) VALUES (3,'OG6427318');
INSERT INTO ACCOGLIENZA (Ristorante, Avventore) VALUES (3,'LR9137648');
INSERT INTO ACCOGLIENZA (Ristorante, Avventore) VALUES (3,'HE5467974');
INSERT INTO ACCOGLIENZA (Ristorante, Avventore) VALUES (3,'TR9746286');
INSERT INTO ACCOGLIENZA (Ristorante, Avventore) VALUES (3,'IT3146975');
INSERT INTO ACCOGLIENZA (Ristorante, Avventore) VALUES (3,'HY9746580');
INSERT INTO ACCOGLIENZA (Ristorante, Avventore) VALUES (3,'LH9137684');
INSERT INTO ACCOGLIENZA (Ristorante, Avventore) VALUES (3,'GE9197735');
COMMIT;
/*===========================================================================================*/
/*===========================================================================================*/
-- Insert per la tabella PARTECIPAZIONETAVOLATA: collega ogni avventore alla tavolata a cui partecipa 
INSERT INTO PARTECIPAZIONETAVOLATA (Avventore, Tavolata) VALUES ('IC3159530',1);
INSERT INTO PARTECIPAZIONETAVOLATA (Avventore, Tavolata) VALUES ('PW824173',1);

INSERT INTO PARTECIPAZIONETAVOLATA (Avventore, Tavolata) VALUES ('WF1996739',2);
INSERT INTO PARTECIPAZIONETAVOLATA (Avventore, Tavolata) VALUES ('SU2810531',2);

INSERT INTO PARTECIPAZIONETAVOLATA (Avventore, Tavolata) VALUES ('BD8518049',3);
INSERT INTO PARTECIPAZIONETAVOLATA (Avventore, Tavolata) VALUES ('KT5802431',3);

INSERT INTO PARTECIPAZIONETAVOLATA (Avventore, Tavolata) VALUES ('WI0726870',4);
INSERT INTO PARTECIPAZIONETAVOLATA (Avventore, Tavolata) VALUES ('CY1881570',4);

INSERT INTO PARTECIPAZIONETAVOLATA (Avventore, Tavolata) VALUES ('RT1739919',5);
INSERT INTO PARTECIPAZIONETAVOLATA (Avventore, Tavolata) VALUES ('YS3432289',5);

INSERT INTO PARTECIPAZIONETAVOLATA (Avventore, Tavolata) VALUES ('GU1160846',6);
INSERT INTO PARTECIPAZIONETAVOLATA (Avventore, Tavolata) VALUES ('AD8695321',6);

INSERT INTO PARTECIPAZIONETAVOLATA (Avventore, Tavolata) VALUES ('BG2548759',7);
INSERT INTO PARTECIPAZIONETAVOLATA (Avventore, Tavolata) VALUES ('GH5632104',7);

INSERT INTO PARTECIPAZIONETAVOLATA (Avventore, Tavolata) VALUES ('FR5849625',8);
INSERT INTO PARTECIPAZIONETAVOLATA (Avventore, Tavolata) VALUES ('TR5625487',8);

INSERT INTO PARTECIPAZIONETAVOLATA (Avventore, Tavolata) VALUES ('BR2648058',9);
INSERT INTO PARTECIPAZIONETAVOLATA (Avventore, Tavolata) VALUES ('LE2615481',9);

INSERT INTO PARTECIPAZIONETAVOLATA (Avventore, Tavolata) VALUES ('ML6215403',10);
INSERT INTO PARTECIPAZIONETAVOLATA (Avventore, Tavolata) VALUES ('RS4697315',10);
INSERT INTO PARTECIPAZIONETAVOLATA (Avventore, Tavolata) VALUES ('GC9674582',10);
INSERT INTO PARTECIPAZIONETAVOLATA (Avventore, Tavolata) VALUES ('AE6164595',10);

INSERT INTO PARTECIPAZIONETAVOLATA (Avventore, Tavolata) VALUES ('PO3031697',11);
INSERT INTO PARTECIPAZIONETAVOLATA (Avventore, Tavolata) VALUES ('MR9748683',11);

INSERT INTO PARTECIPAZIONETAVOLATA (Avventore, Tavolata) VALUES ('DR0301264',12);
INSERT INTO PARTECIPAZIONETAVOLATA (Avventore, Tavolata) VALUES ('LZ9575684',12);
INSERT INTO PARTECIPAZIONETAVOLATA (Avventore, Tavolata) VALUES ('IC2558319',12);
INSERT INTO PARTECIPAZIONETAVOLATA (Avventore, Tavolata) VALUES ('TE0864370',12);
INSERT INTO PARTECIPAZIONETAVOLATA (Avventore, Tavolata) VALUES ('ZO6283162',12);

INSERT INTO PARTECIPAZIONETAVOLATA (Avventore, Tavolata) VALUES ('IH2648039',13);
INSERT INTO PARTECIPAZIONETAVOLATA (Avventore, Tavolata) VALUES ('FU2645786',13);

INSERT INTO PARTECIPAZIONETAVOLATA (Avventore, Tavolata) VALUES ('UR6437280',14);
INSERT INTO PARTECIPAZIONETAVOLATA (Avventore, Tavolata) VALUES ('OG6407351',14);

INSERT INTO PARTECIPAZIONETAVOLATA (Avventore, Tavolata) VALUES ('OG6427318',15);
INSERT INTO PARTECIPAZIONETAVOLATA (Avventore, Tavolata) VALUES ('LR9137648',15);

INSERT INTO PARTECIPAZIONETAVOLATA (Avventore, Tavolata) VALUES ('HE5467974',16);
INSERT INTO PARTECIPAZIONETAVOLATA (Avventore, Tavolata) VALUES ('TR9746286',16);

INSERT INTO PARTECIPAZIONETAVOLATA (Avventore, Tavolata) VALUES ('IT3146975',17);
INSERT INTO PARTECIPAZIONETAVOLATA (Avventore, Tavolata) VALUES ('HY9746580',17);

INSERT INTO PARTECIPAZIONETAVOLATA (Avventore, Tavolata) VALUES ('LH9137684',18);
INSERT INTO PARTECIPAZIONETAVOLATA (Avventore, Tavolata) VALUES ('GE9197735',18);
COMMIT;
/*===========================================================================================*/
/*===========================================================================================*/
-- Insert per la tabella CASO: inserisce i casi covid registrati nei ristoranti 
INSERT INTO CASO (CodCaso, DataRegistrazione, StatoCaso, Note, AvventorePositivo, CamerierePositivo, RegistraProprietario, RegistraManager)
VALUES(1,TO_DATE('25/01/2022','dd/mm/yyyy'),'NonRisolto',NULL,'IC3159530',NULL,1,NULL);

INSERT INTO CASO (CodCaso, DataRegistrazione, StatoCaso, Note, AvventorePositivo, CamerierePositivo, RegistraProprietario, RegistraManager)
VALUES(2,TO_DATE('25/01/2022','dd/mm/yyyy'),'NonRisolto',NULL,'SU2810531',NULL,1,NULL);

INSERT INTO CASO (CodCaso, DataRegistrazione, StatoCaso, Note, AvventorePositivo, CamerierePositivo, RegistraProprietario, RegistraManager)
VALUES(3,TO_DATE('25/01/2022','dd/mm/yyyy'),'NonRisolto',NULL,'RT1739919',NULL,1,NULL);

INSERT INTO CASO (CodCaso, DataRegistrazione, StatoCaso, Note, AvventorePositivo, CamerierePositivo, RegistraProprietario, RegistraManager)
VALUES(4,TO_DATE('25/01/2022','dd/mm/yyyy'),'InRisoluzione',NULL,'LE2615481',NULL,NULL,1);

INSERT INTO CASO (CodCaso, DataRegistrazione, StatoCaso, Note, AvventorePositivo, CamerierePositivo, RegistraProprietario, RegistraManager)
VALUES(5,TO_DATE('25/01/2022','dd/mm/yyyy'),'NonRisolto',NULL,'LZ9575684',NULL,NULL,2);

INSERT INTO CASO (CodCaso, DataRegistrazione, StatoCaso, Note, AvventorePositivo, CamerierePositivo, RegistraProprietario, RegistraManager)
VALUES(6,TO_DATE('25/01/2022','dd/mm/yyyy'),'NonRisolto',NULL,'OG6427318',NULL,NULL,2);

INSERT INTO CASO (CodCaso, DataRegistrazione, StatoCaso, Note, AvventorePositivo, CamerierePositivo, RegistraProprietario, RegistraManager)
VALUES(7,TO_DATE('25/01/2022','dd/mm/yyyy'),'Risolto',NULL,'GE9197735',NULL,NULL,2);

INSERT INTO CASO (CodCaso, DataRegistrazione, StatoCaso, Note, AvventorePositivo, CamerierePositivo, RegistraProprietario, RegistraManager)
VALUES(8,TO_DATE('25/01/2022','dd/mm/yyyy'),'NonRisolto',NULL,NULL,'CA78432DB',1,NULL);

INSERT INTO CASO (CodCaso, DataRegistrazione, StatoCaso, Note, AvventorePositivo, CamerierePositivo, RegistraProprietario, RegistraManager)
VALUES(9,TO_DATE('25/01/2022','dd/mm/yyyy'),'NonRisolto',NULL,NULL,'CA33241OA',NULL,2);

INSERT INTO CASO (CodCaso, DataRegistrazione, StatoCaso, Note, AvventorePositivo, CamerierePositivo, RegistraProprietario, RegistraManager)
VALUES(10,TO_DATE('25/01/2022','dd/mm/yyyy'),'NonRisolto',NULL,NULL,'CA66421DA',1,NULL);
COMMIT;
/*===========================================================================================*/
/*===========================================================================================*/
-- QUERY IMPLEMENTATE DA POTER EFFETTUARE SUL DB 
 
-- 1.Numero giornaliero di avventori per ristorante
-- Supponiamo che il ristorante dato abbia CodRistorante = 1 e la DataArrivo = '17/11/2021'.
SELECT R.Denominazione AS RISTORANTE, T.DataArrivo AS DATA, COUNT(ACC.Avventore) AS TOT_GIORNALIERO_AVVENTORI
FROM RISTORANTE R JOIN ACCOGLIENZA ACC ON R.CodRistorante = ACC.Ristorante 
				  JOIN AVVENTORE A ON A.NumCid = ACC.Avventore 
				  JOIN PARTECIPAZIONETAVOLATA PT ON PT.Avventore = A.NumCid 
				  JOIN TAVOLATA T ON T.CodTavolata = PT.Tavolata 
WHERE R.CodRistorante = 1 AND T.DataArrivo = TO_DATE('17/11/2021','dd/mm/yyyy')
GROUP BY R.Denominazione, T.DataArrivo;
/*============================================================================================*/
/*============================================================================================*/
-- 2.Numero mensile di avventori per ristorante
-- Supponiamo che il ristorante dato abbia CodRistorante = 1 e il mese di riferimento sia 11/2021
SELECT R.Denominazione AS RISTORANTE, TO_CHAR(T.DataArrivo, 'mm  ') AS MESE, TO_CHAR(T.DataArrivo, 'yyyy') AS ANNO, 
	   COUNT(ACC.Avventore) AS TOT_MENSILE_AVVENTORI
FROM RISTORANTE R JOIN ACCOGLIENZA ACC ON R.CodRistorante = ACC.Ristorante 
				  JOIN AVVENTORE A ON A.NumCid = ACC.Avventore 
				  JOIN PARTECIPAZIONETAVOLATA PT ON PT.Avventore = A.NumCid 
				  JOIN TAVOLATA T ON T.CodTavolata = PT.Tavolata 
WHERE R.CodRistorante = 1 AND TO_CHAR(T.DataArrivo,'yyyy') = 2021 AND TO_CHAR(T.DataArrivo,'mm') = 11
GROUP BY R.Denominazione, TO_CHAR(T.DataArrivo,'mm  '),TO_CHAR(T.DataArrivo,'yyyy');
/*============================================================================================*/
/*============================================================================================*/
-- 3.Numero giornaliero di avventori per tutti i ristoranti di un proprietario
-- Supponiamo che il proprietario abbia CodProprietario = 1 e la DataArrivo = '17/11/2021'
SELECT R.Proprietario, T.DataArrivo AS DATA, COUNT(ACC.Avventore) AS TOT_GIORNALIERO_AVVENTORI_RISTORANTI
FROM RISTORANTE R JOIN ACCOGLIENZA ACC ON R.CodRistorante = ACC.Ristorante 
				  JOIN AVVENTORE A ON A.NumCid = ACC.Avventore 
				  JOIN PARTECIPAZIONETAVOLATA PT ON PT.Avventore = A.NumCid 
				  JOIN TAVOLATA T ON T.CodTavolata = PT.Tavolata 
WHERE R.Proprietario = 1 AND T.DataArrivo = TO_DATE('17/11/2021','dd/mm/yyyy')
GROUP BY R.Proprietario, T.DataArrivo;
/*============================================================================================*/
/*============================================================================================*/
-- 4.Numero mensile di avventori per tutti i ristoranti di un proprietario	
-- Supponiamo che il proprietario abbia CodProprietario = 1 e il mese di riferimento sia 11/2021
SELECT R.Proprietario, TO_CHAR(T.DataArrivo, 'mm  ') AS MESE, TO_CHAR(T.DataArrivo, 'yyyy') AS ANNO, 
	   COUNT(ACC.Avventore) AS TOT_MENSILE_AVVENTORI_RISTORANTI
FROM RISTORANTE R JOIN ACCOGLIENZA ACC ON R.CodRistorante = ACC.Ristorante 
				  JOIN AVVENTORE A ON A.NumCid = ACC.Avventore 
				  JOIN PARTECIPAZIONETAVOLATA PT ON PT.Avventore = A.NumCid 
				  JOIN TAVOLATA T ON T.CodTavolata = PT.Tavolata 
WHERE R.Proprietario = 1 AND TO_CHAR(T.DataArrivo,'mm') = 11 AND TO_CHAR(T.DataArrivo, 'yyyy') = 2021 
GROUP BY R.Proprietario, TO_CHAR(T.DataArrivo,'mm  '),TO_CHAR(T.DataArrivo,'yyyy');
/*============================================================================================*/
/*============================================================================================*/
-- 5.Casi positivi di un determinato ristorante per data di arrivo della tavolata
-- Supponiamo che il codice del ristorante sia CodRistorante = 1 e che la data di arrivo della tavolata sia il: '17/11/2021'
SELECT R.Denominazione AS RISTORANTE, T.DataArrivo AS DATA_ARV, 
	   COUNT(C.AvventorePositivo) TOT_RISULTATI_POSITIVI
FROM RISTORANTE R JOIN ACCOGLIENZA A ON R.CodRistorante = A.Ristorante 
				  JOIN CASO C ON C.AvventorePositivo = A.Avventore 
				  JOIN PARTECIPAZIONETAVOLATA PT ON PT.Avventore = C.AvventorePositivo
				  JOIN TAVOLATA T ON PT.Tavolata = T.CodTavolata
WHERE R.CodRistorante = 1 AND T.DataArrivo = TO_DATE('17/11/2021','dd/mm/yyyy')
GROUP BY R.Denominazione, T.DataArrivo;
/*============================================================================================*/
/*============================================================================================*/
-- 6.Casi positivi di un determinato ristorante per mese di arrivo della tavolata
-- Supponiamo che il codice del ristorante sia CodRistorante = 1 e che il mese di arrivo della tavolata sia 11/2021
SELECT R.Denominazione AS RISTORANTE, TO_CHAR(T.DataArrivo, 'mm  ') AS MESE, TO_CHAR(T.DataArrivo, 'yyyy') AS ANNO, 
	   COUNT(C.AvventorePositivo) TOT_RISULTATI_POSITIVI
FROM RISTORANTE R JOIN ACCOGLIENZA A ON R.CodRistorante = A.Ristorante 
				  JOIN CASO C ON C.AvventorePositivo = A.Avventore 
				  JOIN PARTECIPAZIONETAVOLATA PT ON PT.Avventore = C.AvventorePositivo
				  JOIN TAVOLATA T ON PT.Tavolata = T.CodTavolata
WHERE R.CodRistorante = 1 AND TO_CHAR(T.DataArrivo,'mm') = 11 AND TO_CHAR(T.DataArrivo, 'yyyy') = 2021 
GROUP BY R.Denominazione, TO_CHAR(T.DataArrivo, 'mm  '), TO_CHAR(T.DataArrivo, 'yyyy');
/*============================================================================================*/
/*============================================================================================*/
-- 7.Casi positivi di un determinato ristorante per anno di arrivo della tavolata
-- Supponiamo che il codice del ristorante sia CodRistorante = 1 e che l'anno di arrivo della tavolata sia il 2021
SELECT R.Denominazione AS RISTORANTE, TO_CHAR(T.DataArrivo, 'yyyy') AS ANNO, 
	   COUNT(C.AvventorePositivo) TOT_RISULTATI_POSITIVI
FROM RISTORANTE R JOIN ACCOGLIENZA A ON R.CodRistorante = A.Ristorante 
				  JOIN CASO C ON C.AvventorePositivo = A.Avventore 
				  JOIN PARTECIPAZIONETAVOLATA PT ON PT.Avventore = C.AvventorePositivo
				  JOIN TAVOLATA T ON PT.Tavolata = T.CodTavolata
WHERE R.CodRistorante = 1 AND TO_CHAR(T.DataArrivo, 'yyyy') = 2021 
GROUP BY R.Denominazione, TO_CHAR(T.DataArrivo, 'yyyy');
/*============================================================================================*/
/*============================================================================================*/
-- 8.Casi positivi di tutti i ristoranti di un proprietario per data di arrivo della tavolata
-- Supponiamo che il codice del proprietario sia CodProprietario = 1 e che la data di arrivo della tavolata sia il: '17/11/2021'
SELECT R.Proprietario, T.DataArrivo AS DATA_ARV, 
	   COUNT(C.AvventorePositivo) TOT_RISULTATI_POSITIVI_RISTORANTI
FROM RISTORANTE R JOIN ACCOGLIENZA A ON R.CodRistorante = A.Ristorante 
				  JOIN CASO C ON C.AvventorePositivo = A.Avventore 
				  JOIN PARTECIPAZIONETAVOLATA PT ON PT.Avventore = C.AvventorePositivo
				  JOIN TAVOLATA T ON PT.Tavolata = T.CodTavolata
WHERE R.Proprietario = 1 AND T.DataArrivo = TO_DATE('17/11/2021','dd/mm/yyyy')
GROUP BY R.Proprietario, T.DataArrivo;
/*============================================================================================*/
/*============================================================================================*/
-- 9.Casi positivi di tutti i ristoranti di un proprietario per mese di arrivo della tavolata 
-- Supponiamo che il codice del proprietario sia CodProprietario = 1 e che il mese di arrivo della tavolata sia 11/2021
SELECT R.Proprietario, TO_CHAR(T.DataArrivo, 'mm  ') AS MESE, TO_CHAR(T.DataArrivo, 'yyyy') AS ANNO, 
       COUNT(C.AvventorePositivo) TOT_RISULTATI_POSITIVI_RISTORANTI
FROM RISTORANTE R JOIN ACCOGLIENZA A ON R.CodRistorante = A.Ristorante 
				  JOIN CASO C ON C.AvventorePositivo = A.Avventore 
				  JOIN PARTECIPAZIONETAVOLATA PT ON PT.Avventore = C.AvventorePositivo
				  JOIN TAVOLATA T ON PT.Tavolata = T.CodTavolata
WHERE R.Proprietario = 1 AND TO_CHAR(T.DataArrivo,'mm') = 11 AND TO_CHAR(T.DataArrivo, 'yyyy') = 2021 
GROUP BY R.Proprietario, TO_CHAR(T.DataArrivo, 'mm  '), TO_CHAR(T.DataArrivo, 'yyyy');
/*============================================================================================*/
/*============================================================================================*/
-- 10.Casi positivi di tutti i ristoranti di un proprietario per anno di arrivo della tavolata 
-- Supponiamo che il codice del proprietario sia CodProprietario = 1 e che l'anno di arrivo della tavolata sia il 2021
SELECT R.Proprietario, TO_CHAR(T.DataArrivo, 'yyyy') AS ANNO, 
	   COUNT(C.AvventorePositivo) TOT_RISULTATI_POSITIVI_RISTORANTI
FROM RISTORANTE R JOIN ACCOGLIENZA A ON R.CodRistorante = A.Ristorante 
				  JOIN CASO C ON C.AvventorePositivo = A.Avventore 
				  JOIN PARTECIPAZIONETAVOLATA PT ON PT.Avventore = C.AvventorePositivo
				  JOIN TAVOLATA T ON PT.Tavolata = T.CodTavolata
WHERE R.Proprietario = 1 AND TO_CHAR(T.DataArrivo, 'yyyy') = 2021 
GROUP BY R.Proprietario, TO_CHAR(T.DataArrivo, 'yyyy');
/*============================================================================================*/
/*============================================================================================*/
-- 11.Informazioni sugli avventori risultati positivi in un ristorante
-- Supponiamo che il codice del ristorante che ha accolto gli avventori risultati positivi sia CodRistorante = 1
SELECT C.CodCaso, C.DataRegistrazione AS DATAR, CAST(R.Denominazione AS VARCHAR2(20)) AS RISTORANTE,
	   A.NumCid, CAST(A.Nome AS VARCHAR2(30)) AS Nome, CAST(A.Cognome AS VARCHAR2(30)) AS Cognome, A.DataN, 
	   A.Telefono, A.HaGreenpass AS G , T.CodTavolata, T.DataArrivo, T.Cameriere, T.Tavolo, TAV.Sala
FROM RISTORANTE R JOIN ACCOGLIENZA ACC ON R.CodRistorante = ACC.Ristorante 
				  JOIN AVVENTORE A ON A.NumCid = ACC.Avventore 
				  JOIN CASO C ON C.AvventorePositivo = A.NumCid
				  JOIN PARTECIPAZIONETAVOLATA PT ON PT.Avventore = C.AvventorePositivo
				  JOIN TAVOLATA T ON PT.Tavolata = T.CodTavolata
				  JOIN TAVOLO TAV ON TAV.CodTavolo = T.Tavolo  
WHERE R.CodRistorante = 1
ORDER BY C.CodCaso;
/*============================================================================================*/
/*============================================================================================*/
-- 12.Informazioni sugli avventori risultati positivi in tutti i ristoranti di un proprietario 
-- Supponiamo che il codice del proprietario dei ristoranti sia CodProprietario = 1
SELECT C.CodCaso, C.DataRegistrazione AS DATAR, CAST(R.Denominazione AS VARCHAR2(20)) AS RISTORANTE,
	   A.NumCid, CAST(A.Nome AS VARCHAR2(30)) AS Nome, CAST(A.Cognome AS VARCHAR2(30)) AS Cognome, A.DataN, 
	   A.Telefono, A.HaGreenpass AS G , T.CodTavolata, T.DataArrivo, T.Cameriere, T.Tavolo, TAV.Sala
FROM RISTORANTE R JOIN ACCOGLIENZA ACC ON R.CodRistorante = ACC.Ristorante 
				  JOIN AVVENTORE A ON A.NumCid = ACC.Avventore 
				  JOIN CASO C ON C.AvventorePositivo = A.NumCid
				  JOIN PARTECIPAZIONETAVOLATA PT ON PT.Avventore = C.AvventorePositivo
				  JOIN TAVOLATA T ON PT.Tavolata = T.CodTavolata
				  JOIN TAVOLO TAV ON TAV.CodTavolo = T.Tavolo  
WHERE R.Proprietario = 1
ORDER BY C.CodCaso;
/*============================================================================================*/
/*============================================================================================*/
-- 13.Informazioni sui camerieri risultati positivi in un ristorante
-- Supponiamo che il codice del ristorante per cui lavorano i camerieri risultati positivi sia CodRistorante = 1
SELECT CA.CodCaso, CA.DataRegistrazione AS DATAR, 
	   CAST(R.Denominazione AS VARCHAR2(20)) AS RISTORANTE, 
	   C.NumCid, CAST(C.Nome AS VARCHAR2(30)) AS Nome, 
	   CAST(C.Cognome AS VARCHAR2(30)) AS Cognome, 
	   C.DataN, C.Telefono
FROM RISTORANTE R JOIN CAMERIERE C ON R.CodRistorante = C.Ristorante 
				  JOIN CASO CA ON CA.CamerierePositivo = C.NumCid 
WHERE C.Ristorante = 1
ORDER BY CA.CodCaso;
/*============================================================================================*/
/*============================================================================================*/
-- 14.Informazioni sui camerieri risultati positivi in tutti i ristoranti di un proprietario 
-- Supponiamo che il codice del proprietario dei ristoranti sia CodProprietario = 1
SELECT CA.CodCaso, CA.DataRegistrazione AS DATAR, 
	   CAST(R.Denominazione AS VARCHAR2(20)) AS RISTORANTE, 
	   C.NumCid, CAST(C.Nome AS VARCHAR2(30)) AS Nome, 
	   CAST(C.Cognome AS VARCHAR2(30)) AS Cognome, 
	   C.DataN, C.Telefono
FROM RISTORANTE R JOIN CAMERIERE C ON R.CodRistorante = C.Ristorante 
				  JOIN CASO CA ON CA.CamerierePositivo = C.NumCid 
WHERE R.Proprietario = 1
ORDER BY CA.CodCaso;
/*============================================================================================*/
/*============================================================================================*/
-- 15.Avventori positivi con o senza green pass 
-- Per ristorante: supponiamo che CodRistorante = 1 
SELECT COUNT(C.CodCaso) AS AVVENTORI_POSITIVI_CON_GREENPASS
FROM CASO C JOIN AVVENTORE A ON C.AvventorePositivo = A.NumCid 
            JOIN ACCOGLIENZA ACC ON ACC.Avventore = A.NumCid 
WHERE A.HaGreenpass='V' AND ACC.Ristorante = 1;

SELECT COUNT(C.CodCaso) AS AVVENTORI_POSITIVI_SENZA_GREENPASS
FROM CASO C JOIN AVVENTORE A ON C.AvventorePositivo = A.NumCid 
            JOIN ACCOGLIENZA ACC ON ACC.Avventore = A.NumCid 
WHERE A.HaGreenpass='F' AND ACC.Ristorante = 1;

-- Per proprietario: supponiamo che CodProprietario = 1 
SELECT COUNT(C.CodCaso) AS AVVENTORI_POSITIVI_CON_GREENPASS
FROM CASO C JOIN AVVENTORE A ON C.AvventorePositivo = A.NumCid 
            JOIN ACCOGLIENZA ACC ON ACC.Avventore = A.NumCid 
			JOIN RISTORANTE R ON R.CodRistorante = ACC.Ristorante
WHERE A.HaGreenpass='V' AND R.Proprietario = 1;

SELECT COUNT(C.CodCaso) AS AVVENTORI_POSITIVI_SENZA_GREENPASS
FROM CASO C JOIN AVVENTORE A ON C.AvventorePositivo = A.NumCid 
            JOIN ACCOGLIENZA ACC ON ACC.Avventore = A.NumCid 
			JOIN RISTORANTE R ON R.CodRistorante = ACC.Ristorante
WHERE A.HaGreenpass='F' AND R.Proprietario = 1;
/*============================================================================================*/
/*============================================================================================*/
-- 16.Numero di avventori medio per tavolata di un ristorante 
-- Supponendo di voler conoscere la media di avventori per tavolata del ristorante di CodRistorante = 2
-- Utilizziamo la vista RIEPILOGO_TAVOLATE_RISTORANTI_PROPRIETARIO
SELECT T.CodRistorante, T.Ristorante,  AVG(T.PartecipantiTavolata) AS MEDIA_AVVENTORI_PER_TAVOLATA
FROM RIEPILOGO_TAVOLATE_RISTORANTI_PROPRIETARIO T 
WHERE T.CodRistorante = 2
GROUP BY T.CodRistorante, T.Ristorante;
/*============================================================================================*/
/*============================================================================================*/