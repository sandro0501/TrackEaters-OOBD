
-- Crea la tabella PROPRIETARIO
CREATE TABLE PROPRIETARIO
(
	CodProprietario	INTEGER		  GENERATED BY DEFAULT AS IDENTITY,
	Username		VARCHAR2(64)  NOT NULL,	
	Password 		VARCHAR2(64)  NOT NULL,
	Nome			VARCHAR2(64)  NOT NULL,
	Cognome			VARCHAR2(64)  NOT NULL,
	Email			VARCHAR(320)   
);

-- Definizione dei vincoli per la tabella PROPRIETARIO
ALTER TABLE PROPRIETARIO ADD
(
	-- Vincolo di chiave primaria
	CONSTRAINT PK_PROPRIETARIO PRIMARY KEY (CodProprietario),
	
	-- Vincolo Email legale
	CONSTRAINT EMAIL_LEGALE_PROPRIETARIO CHECK (Email LIKE '_%@_%.__%' OR Email IS NULL),
	
	-- Vincolo Unico username proprietario
	CONSTRAINT UNICO_USERNAME_PROPRIETARIO UNIQUE (Username)
);

/*============================================================================================*/
-- Trigger Password_legale 
CREATE OR REPLACE TRIGGER Password_legale
BEFORE INSERT OR UPDATE ON PROPRIETARIO
FOR EACH ROW
DECLARE

password_okay INTEGER; 

BEGIN
	
	-- Controlla se la password contiene almeno una lettera ed un numero 
	IF REGEXP_LIKE(:NEW.Password,'^.*[A-Z].*$') AND REGEXP_LIKE(:NEW.Password,'^.*[0-9].*$') THEN
		password_okay := 1;
	ELSE
		password_okay := 0; -- La password non contiene almeno una lettera ed un numero 
	END IF;
	
	/* Se la password inserita è lunga meno di 8 caratteri o 
	non contiene almeno una lettera ed un numero 
	allora non è valida */
	IF (LENGTH(:NEW.Password)<8) OR (password_okay = 0) THEN
		RAISE_APPLICATION_ERROR(-20010,'Password non valida. Deve contenere almeno 8 caratteri, una lettera ed un numero!');
	END IF;
	
END;
/*============================================================================================*/
-- Trigger SetUpper_Nome_Cognome
CREATE OR REPLACE TRIGGER SetUpper_Nome_Cognome
BEFORE INSERT OR UPDATE ON PROPRIETARIO
FOR EACH ROW
 
BEGIN

	-- Setta la stringa relativa a Nome tutta in maiuscolo
	:NEW.Nome := UPPER(:NEW.Nome);
	
	-- Setta la stringa relativa a Cognome tutta in maiuscolo
	:NEW.Cognome := UPPER(:NEW.Cognome);
	
END;
/*============================================================================================*/

-- Crea la tabella RISTORANTE
CREATE TABLE RISTORANTE
(
	CodRistorante	INTEGER		  GENERATED BY DEFAULT AS IDENTITY,
	Denominazione	VARCHAR2(64)  NOT NULL,	
	Indirizzo 		VARCHAR2(64)  NOT NULL,
	Telefono		VARCHAR2(15)  NOT NULL,
	Citta			VARCHAR2(64)  NOT NULL,
	Prov			VARCHAR2(2)   NOT NULL,
	Cap				VARCHAR2(5)   NOT NULL,
	Email			VARCHAR(320),  
	SitoWeb			VARCHAR(100), 
	Proprietario	INTEGER   	  NOT NULL
);

-- Definizione dei vincoli per la tabella PROPRIETARIO
ALTER TABLE RISTORANTE ADD
(
	-- Vincolo di chiave primaria
	CONSTRAINT PK_RISTORANTE PRIMARY KEY (CodRistorante),
	
	-- Vincolo di chiave esterna
	/*Non sarà possibile eliminare un proprietario a cui sono associati uno o più ristoranti
	ON DELETE NO ACTION è implementato di default da ORACLE*/ 
	CONSTRAINT FK_RISTORANTE FOREIGN KEY (Proprietario) REFERENCES PROPRIETARIO(CodProprietario) /*ON DELETE NO ACTION*/ ,
	
	-- Vincolo Email legale
	CONSTRAINT EMAIL_LEGALE_RISTORANTE CHECK (Email LIKE '_%@_%.__%' OR Email IS NULL),
	
	-- Vincolo Sito Web Legale
	CONSTRAINT SITO_WEB_LEGALE CHECK (SitoWeb LIKE 'www.__%._%' OR SitoWeb IS NULL)	
);

--da fare: Vincoli Telefono, Prov, Cap 